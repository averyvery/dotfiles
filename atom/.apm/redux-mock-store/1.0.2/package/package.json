{"name":"redux-mock-store","version":"1.0.2","description":"[![Circle CI](https://circleci.com/gh/arnaudbenard/redux-mock-store/tree/master.svg?style=svg)](https://circleci.com/gh/arnaudbenard/redux-mock-store/tree/master)","main":"lib/index.js","scripts":{"prepublish":"rimraf lib && babel src --out-dir lib","test":"mocha --compilers js:babel/register --reporter spec test/*.js"},"repository":{"type":"git","url":"git+https://github.com/arnaudbenard/redux-mock-store.git"},"author":{"name":"Arnaud Benard","email":"arnaudm.benard@gmail.com"},"license":"MIT","bugs":{"url":"https://github.com/arnaudbenard/redux-mock-store/issues"},"homepage":"https://github.com/arnaudbenard/redux-mock-store#readme","devDependencies":{"babel":"^5.8.29","expect":"^1.12.2","mocha":"^2.3.3","redux":"^3.0.4","redux-thunk":"^2.0.1","rimraf":"^2.4.3","sinon":"^1.17.2"},"readme":"[![Circle CI](https://circleci.com/gh/arnaudbenard/redux-mock-store/tree/master.svg?style=svg)](https://circleci.com/gh/arnaudbenard/redux-mock-store/tree/master)\n\n# redux-mock-store\n\nA mock store for your testing your redux async action creators and middleware. The mock store will store the dispatched actions in an array to be used in your tests.\n\n## Old version documentation (`< 1.x.x`)\n\nhttps://github.com/arnaudbenard/redux-mock-store/blob/v0.0.6/README.md\n\n## Install\n\n```\nnpm install redux-mock-store --save-dev\n```\n\n## How to use\n\n```js\n\n// actions.test.js\n\nimport configureStore from 'redux-mock-store';\nimport thunk from 'redux-thunk';\n\nconst middlewares = [thunk]; // add your middlewares like `redux-thunk`\nconst mockStore = configureStore(middlewares);\n\n// Test example with mocha and expect\nit('should dispatch action', () => {\n  const getState = {}; // initial state of the store\n  const addTodo = { type: 'ADD_TODO' };\n\n  const store = mockStore(getState);\n  store.dispatch(addTodo);\n\n  const actions = store.getActions();\n\n  expect(actions).toEqual([addTodo]);\n});\n\n// Promise test example with mocha and expect\nit('should execute promise', (done) => {\n    function success() {\n      return {\n        type: 'FETCH_DATA_SUCCESS'\n      };\n    }\n\n    function fetchData() {\n      return dispatch => {\n        return fetch('/users.json') // Some async action with promise\n          .then(() => dispatch(success()));\n      };\n    }\n\n    const store = mockStore({});\n\n    store.dispatch(fetchData())\n      .then(() => {\n        expect(store.getActions()[0]).toEqual(success())\n        done();\n      });\n})\n```\n\n## API\n\n```\n- configureStore(middlewares?: Array) => mockStore: function\n- mockStore(getState?: Object,Function) => store: Function\n- store.dispatch(action) => action\n- store.getState() => state: Object\n- store.getActions() => actions: Array\n- store.clearActions()\n```\n\n## License\n\nMIT\n","readmeFilename":"README.md","_id":"redux-mock-store@1.0.2","_shasum":"5c690e3898f21588c47448cabd8dbcf3bedd5f25","_resolved":"https://registry.npmjs.org/redux-mock-store/-/redux-mock-store-1.0.2.tgz","_from":"https://registry.npmjs.org/redux-mock-store/-/redux-mock-store-1.0.2.tgz"}