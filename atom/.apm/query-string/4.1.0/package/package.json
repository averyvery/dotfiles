{"name":"query-string","version":"4.1.0","description":"Parse and stringify URL query strings","license":"MIT","repository":{"type":"git","url":"git+https://github.com/sindresorhus/query-string.git"},"author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"sindresorhus.com"},"engines":{"node":">=0.10.0"},"scripts":{"test":"xo && ava"},"files":["index.js"],"keywords":["browser","querystring","query","string","qs","param","parameter","url","uri","parse","stringify","encode","decode"],"dependencies":{"strict-uri-encode":"^1.0.0"},"devDependencies":{"ava":"*","xo":"*"},"readme":"# query-string [![Build Status](https://travis-ci.org/sindresorhus/query-string.svg?branch=master)](https://travis-ci.org/sindresorhus/query-string)\n\n> Parse and stringify URL [query strings](http://en.wikipedia.org/wiki/Query_string)\n\n\n## Install\n\n```\n$ npm install --save query-string\n```\n\n\n## Usage\n\n```js\nconst queryString = require('query-string');\n\nconsole.log(location.search);\n//=> '?foo=bar'\n\nconst parsed = queryString.parse(location.search);\nconsole.log(parsed);\n//=> {foo: 'bar'}\n\nconsole.log(location.hash);\n//=> '#token=bada55cafe'\n\nconst parsedHash = queryString.parse(location.hash);\nconsole.log(parsedHash);\n//=> {token: 'bada55cafe'}\n\nparsed.foo = 'unicorn';\nparsed.ilike = 'pizza';\n\nlocation.search = queryString.stringify(parsed);\n\nconsole.log(location.search);\n//=> '?foo=unicorn&ilike=pizza'\n```\n\n\n## API\n\n### .parse(*string*)\n\nParse a query string into an object. Leading `?` or `#` are ignored, so you can pass `location.search` or `location.hash` directly.\n\nThe returned object is created with [`Object.create(null)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create) and thus does not have a `prototype`.\n\n### .stringify(*object*, *[options]*)\n\nStringify an object into a query string, sorting the keys.\n\n#### strict\n\nType: `boolean`<br />\nDefault: `true`\n\nStrictly encode URI components with [strict-uri-encode](https://github.com/kevva/strict-uri-encode). It uses [encodeURIComponent](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent)\nif set to false. You probably [don't care](https://github.com/sindresorhus/query-string/issues/42) about this option.\n\n### .extract(*string*)\n\nExtract a query string from a URL that can be passed into `.parse()`.\n\n\n## Nesting\n\nThis module intentionally doesn't support nesting as it's not spec'd and varies between implementations, which causes a lot of [edge cases](https://github.com/visionmedia/node-querystring/issues).\n\nYou're much better off just converting the object to a JSON string:\n\n```js\nqueryString.stringify({\n\tfoo: 'bar',\n\tnested: JSON.stringify({\n\t\tunicorn: 'cake'\n\t})\n});\n//=> 'foo=bar&nested=%7B%22unicorn%22%3A%22cake%22%7D'\n```\n\n\n## License\n\nMIT Â© [Sindre Sorhus](https://sindresorhus.com)\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sindresorhus/query-string/issues"},"homepage":"https://github.com/sindresorhus/query-string#readme","_id":"query-string@4.1.0","_shasum":"a092273bcef2dddad4a2f0d4e1796701beb35a23","_resolved":"https://registry.npmjs.org/query-string/-/query-string-4.1.0.tgz","_from":"https://registry.npmjs.org/query-string/-/query-string-4.1.0.tgz"}