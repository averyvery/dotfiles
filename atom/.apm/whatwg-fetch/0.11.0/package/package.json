{"name":"whatwg-fetch","description":"A window.fetch polyfill.","version":"0.11.0","main":"fetch.js","repository":{"type":"git","url":"git+https://github.com/github/fetch.git"},"licenses":[{"type":"MIT","url":"https://github.com/github/fetch/blob/master/LICENSE"}],"devDependencies":{"bower":"1.3.8","chai":"1.10.0","jshint":"2.8.0","mocha-phantomjs":"3.5.2","mocha":"2.1.0","phantomjs":"1.9.19"},"files":["LICENSE","fetch.js"],"readme":"# window.fetch polyfill\n\nThis project adheres to the [Open Code of Conduct][code-of-conduct]. By participating, you are expected to uphold this code.\n[code-of-conduct]: http://todogroup.org/opencodeofconduct/#fetch/opensource@github.com\n\nThe global `fetch` function is an easier way to make web requests and handle\nresponses than using an XMLHttpRequest. This polyfill is written as closely as\npossible to the standard Fetch specification at https://fetch.spec.whatwg.org.\n\n## Installation\n\nAvailable on [Bower](http://bower.io) as **fetch**.\n\n```sh\n$ bower install fetch\n```\n\nYou'll also need a Promise polyfill for [older browsers](http://caniuse.com/#feat=promises).\n\n```sh\n$ bower install es6-promise\n```\n\nThis can also be installed with `npm`.\n\n```sh\n$ npm install whatwg-fetch --save\n```\n\nFor a node.js implementation, try [node-fetch](https://github.com/bitinn/node-fetch).\n\nFor use with webpack, refer to [Using WebPack with shims and polyfills](http://mts.io/2015/04/08/webpack-shims-polyfills/).\n\n## Usage\n\nThe `fetch` function supports any HTTP method. We'll focus on GET and POST\nexample requests.\n\n### HTML\n\n```javascript\nfetch('/users.html')\n  .then(function(response) {\n    return response.text()\n  }).then(function(body) {\n    document.body.innerHTML = body\n  })\n```\n\n### JSON\n\n```javascript\nfetch('/users.json')\n  .then(function(response) {\n    return response.json()\n  }).then(function(json) {\n    console.log('parsed json', json)\n  }).catch(function(ex) {\n    console.log('parsing failed', ex)\n  })\n```\n\n### Response metadata\n\n```javascript\nfetch('/users.json').then(function(response) {\n  console.log(response.headers.get('Content-Type'))\n  console.log(response.headers.get('Date'))\n  console.log(response.status)\n  console.log(response.statusText)\n})\n```\n\n### Post form\n\n```javascript\nvar form = document.querySelector('form')\n\nfetch('/users', {\n  method: 'post',\n  body: new FormData(form)\n})\n```\n\n### Post JSON\n\n```javascript\nfetch('/users', {\n  method: 'post',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    name: 'Hubot',\n    login: 'hubot',\n  })\n})\n```\n\n### File upload\n\n```javascript\nvar input = document.querySelector('input[type=\"file\"]')\n\nvar data = new FormData()\ndata.append('file', input.files[0])\ndata.append('user', 'hubot')\n\nfetch('/avatars', {\n  method: 'post',\n  body: data\n})\n```\n\n### Caveats\n\nThe `fetch` specification differs from `jQuery.ajax()` in mainly two ways that\nbear keeping in mind:\n\n* The Promise returned from `fetch()` **won't reject on HTTP error status**\n  even if the response is a HTTP 404 or 500. Instead, it will resolve normally,\n  and it will only reject on network failure, or if anything prevented the\n  request from completing.\n\n* By default, `fetch` **won't send any cookies** to the server, resulting in\n  unauthenticated requests if the site relies on maintaining a user session.\n\n#### Handling HTTP error statuses\n\nTo have `fetch` Promise reject on HTTP error statuses, i.e. on any non-2xx\nstatus, define a custom response handler:\n\n```javascript\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response\n  } else {\n    var error = new Error(response.statusText)\n    error.response = response\n    throw error\n  }\n}\n\nfunction parseJSON(response) {\n  return response.json()\n}\n\nfetch('/users')\n  .then(checkStatus)\n  .then(parseJSON)\n  .then(function(data) {\n    console.log('request succeeded with JSON response', data)\n  }).catch(function(error) {\n    console.log('request failed', error)\n  })\n```\n\n#### Sending cookies\n\nTo automatically send cookies for the current domain, the `credentials` option\nmust be provided:\n\n```javascript\nfetch('/users', {\n  credentials: 'same-origin'\n})\n```\n\nThis option makes `fetch` behave similar to XMLHttpRequest with regards to\ncookies. Otherwise, cookies won't get sent, resulting in these requests not\npreserving the authentication session.\n\nUse the `include` value to send cookies in a [cross-origin resource sharing](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing) (CORS) request.\n\n```javascript\nfetch('https://example.com:1234/users', {\n  credentials: 'include'\n})\n```\n\n\n#### Receiving cookies\n\nLike with XMLHttpRequest, the `Set-Cookie` response header returned from the\nserver is a [forbidden header name][] and therefore can't be programatically\nread with `response.headers.get()`. Instead, it's the browser's responsibility\nto handle new cookies being set (if applicable to the current URL). Unless they\nare HTTP-only, new cookies will be available through `document.cookie`.\n\n  [forbidden header name]: https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name\n\n#### Obtaining the Response URL\n\nDue to limitations of XMLHttpRequest, the `response.url` value might not be\nreliable after HTTP redirects on older browsers.\n\nThe solution is to configure the server to set the response HTTP header\n`X-Request-URL` to the current URL after any redirect that might have happened.\nIt should be safe to set it unconditionally.\n\n``` ruby\n# Ruby on Rails controller example\nresponse.headers['X-Request-URL'] = request.url\n```\n\nThis server workaround is necessary if you need reliable `response.url` in\nFirefox < 32, Chrome < 37, Safari, or IE.\n\n## Browser Support\n\n![Chrome](https://raw.github.com/alrra/browser-logos/master/chrome/chrome_48x48.png) | ![Firefox](https://raw.github.com/alrra/browser-logos/master/firefox/firefox_48x48.png) | ![IE](https://raw.github.com/alrra/browser-logos/master/internet-explorer/internet-explorer_48x48.png) | ![Opera](https://raw.github.com/alrra/browser-logos/master/opera/opera_48x48.png) | ![Safari](https://raw.github.com/alrra/browser-logos/master/safari/safari_48x48.png)\n--- | --- | --- | --- | --- |\nLatest ✔ | Latest ✔ | 9+ ✔ | Latest ✔ | 6.1+ ✔ |\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/github/fetch/issues"},"homepage":"https://github.com/github/fetch#readme","_id":"whatwg-fetch@0.11.0","_shasum":"46b1d18d0aa99955971ef1a2f5aac506add28815","_resolved":"https://registry.npmjs.org/whatwg-fetch/-/whatwg-fetch-0.11.0.tgz","_from":"https://registry.npmjs.org/whatwg-fetch/-/whatwg-fetch-0.11.0.tgz"}