{"name":"redux-thunk","version":"2.0.1","description":"Thunk middleware for Redux.","main":"lib/index.js","jsnext:main":"es/index.js","files":["lib","es","src","dist"],"scripts":{"clean":"rimraf lib dist es","build":"npm run build:commonjs && npm run build:umd && npm run build:umd:min && npm run build:es","prepublish":"npm run clean && npm run test && npm run build","posttest":"npm run lint","lint":"eslint src test","test":"cross-env BABEL_ENV=commonjs mocha --compilers js:babel-core/register --reporter spec test/*.js","build:commonjs":"cross-env BABEL_ENV=commonjs babel src --out-dir lib","build:es":"cross-env BABEL_ENV=es babel src --out-dir es","build:umd":"cross-env BABEL_ENV=commonjs NODE_ENV=development webpack","build:umd:min":"cross-env BABEL_ENV=commonjs NODE_ENV=production webpack"},"repository":{"type":"git","url":"git+https://github.com/gaearon/redux-thunk.git"},"homepage":"https://github.com/gaearon/redux-thunk","keywords":["redux","thunk","middleware","redux-middleware","flux"],"author":{"name":"Dan Abramov","email":"dan.abramov@me.com"},"license":"MIT","devDependencies":{"babel-cli":"^6.6.5","babel-core":"^6.6.5","babel-eslint":"^5.0.0-beta4","babel-loader":"^6.2.4","babel-plugin-check-es2015-constants":"^6.6.5","babel-plugin-transform-es2015-arrow-functions":"^6.5.2","babel-plugin-transform-es2015-block-scoped-functions":"^6.6.5","babel-plugin-transform-es2015-block-scoping":"^6.6.5","babel-plugin-transform-es2015-classes":"^6.6.5","babel-plugin-transform-es2015-computed-properties":"^6.6.5","babel-plugin-transform-es2015-destructuring":"^6.6.5","babel-plugin-transform-es2015-for-of":"^6.6.0","babel-plugin-transform-es2015-function-name":"^6.5.0","babel-plugin-transform-es2015-literals":"^6.5.0","babel-plugin-transform-es2015-modules-commonjs":"^6.6.5","babel-plugin-transform-es2015-object-super":"^6.6.5","babel-plugin-transform-es2015-parameters":"^6.6.5","babel-plugin-transform-es2015-shorthand-properties":"^6.5.0","babel-plugin-transform-es2015-spread":"^6.6.5","babel-plugin-transform-es2015-sticky-regex":"^6.5.0","babel-plugin-transform-es2015-template-literals":"^6.6.5","babel-plugin-transform-es2015-unicode-regex":"^6.5.0","babel-plugin-transform-es3-member-expression-literals":"^6.5.0","babel-plugin-transform-es3-property-literals":"^6.5.0","chai":"^3.2.0","cross-env":"^1.0.7","eslint":"^1.10.2","eslint-config-airbnb":"1.0.2","eslint-plugin-react":"^4.1.0","mocha":"^2.2.5","rimraf":"^2.5.2","webpack":"^1.12.14"},"readme":"Redux Thunk\n=============\n\nThunk [middleware](http://redux.js.org/docs/advanced/Middleware.html) for Redux.\n\n[![build status](https://img.shields.io/travis/gaearon/redux-thunk/master.svg?style=flat-square)](https://travis-ci.org/gaearon/redux-thunk) \n[![npm version](https://img.shields.io/npm/v/redux-thunk.svg?style=flat-square)](https://www.npmjs.com/package/redux-thunk)\n[![npm downloads](https://img.shields.io/npm/dm/redux-thunk.svg?style=flat-square)](https://www.npmjs.com/package/redux-thunk)\n\n```js\nnpm install --save redux-thunk\n```\n\n## Why Do I Need This?\n\nIf you’re not sure whether you need it, you probably don’t.\n\n**[Read this for an in-depth introduction to thunks in Redux.](http://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559)**\n\n## Motivation\n\nRedux Thunk [middleware](https://github.com/reactjs/redux/blob/master/docs/advanced/Middleware.md) allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods `dispatch` and `getState()` as parameters.\n\nAn action creator that returns a function to perform asynchronous dispatch:\n\n```js\nconst INCREMENT_COUNTER = 'INCREMENT_COUNTER';\n\nfunction increment() {\n  return {\n    type: INCREMENT_COUNTER\n  };\n}\n\nfunction incrementAsync() {\n  return dispatch => {\n    setTimeout(() => {\n      // Yay! Can invoke sync or async actions with `dispatch`\n      dispatch(increment());\n    }, 1000);\n  };\n}\n```\n\nAn action creator that returns a function to perform conditional dispatch:\n\n```js\nfunction incrementIfOdd() {\n  return (dispatch, getState) => {\n    const { counter } = getState();\n\n    if (counter % 2 === 0) {\n      return;\n    }\n\n    dispatch(increment());\n  };\n}\n```\n\n## What’s a thunk?!\n\nA [thunk](https://en.wikipedia.org/wiki/Thunk) is a function that wraps an expression to delay its evaluation.\n\n```js\n// calculation of 1 + 2 is immediate\n// x === 3\nlet x = 1 + 2;\n\n// calculation of 1 + 2 is delayed\n// foo can be called later to perform the calculation\n// foo is a thunk!\nlet foo = () => 1 + 2;\n```\n\n\n## Installation\n\n```\nnpm install --save redux-thunk\n```\n\nThen, to enable Redux Thunk, use [`applyMiddleware()`](http://redux.js.org/docs/api/applyMiddleware.html):\n\n```js\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/index';\n\n// Note: this API requires redux@>=3.1.0\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n);\n```\n\n## Composition\n\nAny return value from the inner function will be available as the return value of `dispatch` itself. This is convenient for orchestrating an asynchronous control flow with thunk action creators dispatching each other and returning Promises to wait for each other’s completion:\n\n```js\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\n// Note: this API requires redux@>=3.1.0\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n);\n\nfunction fetchSecretSauce() {\n  return fetch('https://www.google.com/search?q=secret+sauce');\n}\n\n// These are the normal action creators you have seen so far.\n// The actions they return can be dispatched without any middleware.\n// However, they only express “facts” and not the “async flow”.\n\nfunction makeASandwich(forPerson, secretSauce) {\n  return {\n    type: 'MAKE_SANDWICH',\n    forPerson,\n    secretSauce\n  };\n}\n\nfunction apologize(fromPerson, toPerson, error) {\n  return {\n    type: 'APOLOGIZE',\n    fromPerson,\n    toPerson,\n    error\n  };\n}\n\nfunction withdrawMoney(amount) {\n  return {\n    type: 'WITHDRAW',\n    amount\n  };\n}\n\n// Even without middleware, you can dispatch an action:\nstore.dispatch(withdrawMoney(100));\n\n// But what do you do when you need to start an asynchronous action,\n// such as an API call, or a router transition?\n\n// Meet thunks.\n// A thunk is a function that returns a function.\n// This is a thunk.\n\nfunction makeASandwichWithSecretSauce(forPerson) {\n\n  // Invert control!\n  // Return a function that accepts `dispatch` so we can dispatch later.\n  // Thunk middleware knows how to turn thunk async actions into actions.\n\n  return function (dispatch) {\n    return fetchSecretSauce().then(\n      sauce => dispatch(makeASandwich(forPerson, sauce)),\n      error => dispatch(apologize('The Sandwich Shop', forPerson, error))\n    );\n  };\n}\n\n// Thunk middleware lets me dispatch thunk async actions\n// as if they were actions!\n\nstore.dispatch(\n  makeASandwichWithSecretSauce('Me')\n);\n\n// It even takes care to return the thunk’s return value\n// from the dispatch, so I can chain Promises as long as I return them.\n\nstore.dispatch(\n  makeASandwichWithSecretSauce('My wife')\n).then(() => {\n  console.log('Done!');\n});\n\n// In fact I can write action creators that dispatch\n// actions and async actions from other action creators,\n// and I can build my control flow with Promises.\n\nfunction makeSandwichesForEverybody() {\n  return function (dispatch, getState) {\n    if (!getState().sandwiches.isShopOpen) {\n\n      // You don’t have to return Promises, but it’s a handy convention\n      // so the caller can always call .then() on async dispatch result.\n\n      return Promise.resolve();\n    }\n\n    // We can dispatch both plain object actions and other thunks,\n    // which lets us compose the asynchronous actions in a single flow.\n\n    return dispatch(\n      makeASandwichWithSecretSauce('My Grandma')\n    ).then(() =>\n      Promise.all([\n        dispatch(makeASandwichWithSecretSauce('Me')),\n        dispatch(makeASandwichWithSecretSauce('My wife'))\n      ])\n    ).then(() =>\n      dispatch(makeASandwichWithSecretSauce('Our kids'))\n    ).then(() =>\n      dispatch(getState().myMoney > 42 ?\n        withdrawMoney(42) :\n        apologize('Me', 'The Sandwich Shop')\n      )\n    );\n  };\n}\n\n// This is very useful for server side rendering, because I can wait\n// until data is available, then synchronously render the app.\n\nstore.dispatch(\n  makeSandwichesForEverybody()\n).then(() =>\n  response.send(React.renderToString(<MyApp store={store} />))\n);\n\n// I can also dispatch a thunk async action from a component\n// any time its props change to load the missing data.\n\nimport { connect } from 'react-redux';\nimport { Component } from 'react';\n\nclass SandwichShop extends Component {\n  componentDidMount() {\n    this.props.dispatch(\n      makeASandwichWithSecretSauce(this.props.forPerson)\n    );\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.forPerson !== this.props.forPerson) {\n      this.props.dispatch(\n        makeASandwichWithSecretSauce(nextProps.forPerson)\n      );\n    }\n  }\n\n  render() {\n    return <p>{this.props.sandwiches.join('mustard')}</p>\n  }\n}\n\nexport default connect(\n  state => ({\n    sandwiches: state.sandwiches\n  })\n)(SandwichShop);\n```\n\n## License\n\nMIT\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/gaearon/redux-thunk/issues"},"_id":"redux-thunk@2.0.1","_shasum":"f0b31070fa1a243a4b19f904befdc2ee439aade9","_resolved":"https://registry.npmjs.org/redux-thunk/-/redux-thunk-2.0.1.tgz","_from":"https://registry.npmjs.org/redux-thunk/-/redux-thunk-2.0.1.tgz"}