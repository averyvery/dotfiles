{"name":"react-hot-api","version":"0.4.7","description":"A generic library implementing hot reload for React components without unmounting or losing their state.","main":"modules/index.js","scripts":{"build":"./scripts/build"},"repository":{"type":"git","url":"git+https://github.com/gaearon/react-hot-api.git"},"author":{"name":"Dan Abramov","email":"dan.abramov@me.com","url":"http://github.com/gaearon"},"license":"MIT","bugs":{"url":"https://github.com/gaearon/react-hot-api/issues"},"homepage":"https://github.com/gaearon/react-hot-api","peerDependencies":{"react":">=0.11.0 || ^0.14.0-rc"},"devDependencies":{"webpack":"1.4.8"},"readme":"React Hot API\n=========\n\nThis is a generic library implementing hot reload for React components without unmounting or losing their state.  \n\n**It is intended for build tool authors or adventurous folk and *not* for website development. For a reference implementation *that you can actually use*, check out [react-hot-loader](https://github.com/gaearon/react-hot-loader) for Webpack.**\n\nThis library drives React hot-reload magic of **[react-hot-loader](https://github.com/gaearon/react-hot-loader)** but is not tied to Webpack itself, so alternative build systems that support hot-reloading individual modules can use it to implement **[live-editing for React components](http://gaearon.github.io/react-hot-loader/)**. For example, you can use this to **[integrate hot reloading into an atom-shell application](https://github.com/BenoitZugmeyer/chwitt-react/blob/2d62184986c7c183955dcb607dba5ceda70a2221/bootstrap-jsx.js#L33)**. \n\n**[See the video.](https://vimeo.com/100010922)**\n\n### API\n\n#### `makeHot: (ReactClass, persistentId?) => ReactClass`\n\nRegisters a hot-reloadable React class. If you don't pass `persistentId`, it is inferred from `ReactClass.displayName` or `ReactClass.name` (for ES6 classes). When called for the first time, it will merely return the passed class. When called the next time with the same `persistentId`, will patch original class with the prototype of the new class, and return the original class.\n\n#### `require('react-hot-api'): (getRootInstances, React) => makeHot`\n\nInvoke this once within each hot-reloadable module to obtain the function described above.  \nYou must pass the result between *all emitted versions of the same module* for hot reload to work.\n\n`getRootInstances` is a method you as a caller should provide. It should return all root components on the page.\nYou can implement it by returning `require('react/lib/ReactMount')._instancesByReactRootID` but you may also want to return some known root instance, for example, if you host React Hot API on a webpage for a live editor playground.\n\n### Usage\n\nThis library is not meant to be used directly, unless you're authoring a build tool like [React Hot Loader](https://github.com/gaearon/react-hot-loader).\n\nIt only makes sense if your build tool of choice is capable of two things:\n\n* emitting next versions of the same module and evaluate them;\n* passing arbitrary JS objects from previous to the next version of the same module.\n\nI am only aware of [Webpack Hot Module Replacement](http://webpack.github.io/docs/hot-module-replacement.html) but eventually other implementations should arise.\n\nIn which case, here's how you can tranform the source to use it:\n\n##### SomeComponent.js, first run\n\n```javascript\nvar React = require('react');\n\nvar SomeComponent = React.createClass({\n  render: function () {\n    return <p>Version 1</p>;\n  }\n});\n\nmodule.exports = SomeComponent;\n\n\n\n// ================================================\n// The code you might generate with your build tool\n// to hide hot reloading mechanics from user:\n\nvar makeHot = SOME_STORAGE_SHARED_BETWEEN_VERSIONS_OF_SAME_MODULE.makeHot;\nif (!makeHot) {\n  // On the first run, we will get here\n  makeHot = SOME_STORAGE_SHARED_BETWEEN_VERSIONS_OF_SAME_MODULE.makeHot = require('react-hot-api')(require('react/lib/ReactMount'));\n}\n\n// Will merely register SomeComponent so it can later be patched\nmodule.exports = makeHot(module.exports);\n```\n\n##### SomeComponent.js, subsequent runs (emitted after user edits the source)\n```javascript\nvar React = require('react');\n\nvar SomeComponent = React.createClass({\n  render: function () {\n    return <p>Version 2</p>;\n  }\n});\n\nmodule.exports = SomeComponent;\n\n\n\n// ================================================\n// The code you might generate with your build tool\n// to hide hot reloading mechanics from user:\n\nvar makeHot = SOME_STORAGE_SHARED_BETWEEN_VERSIONS_OF_SAME_MODULE.makeHot;\nif (!makeHot) {\n  // On the second run, we will *NOT* get here\n  makeHot = SOME_STORAGE_SHARED_BETWEEN_VERSIONS_OF_SAME_MODULE.makeHot = require('react-hot-api')(require('react/lib/ReactMount'));\n}\n\n// Will patch existing SomeComponent with updated methods, force re-rendering and return patched first version\nmodule.exports = makeHot(module.exports);\n```\n\nYou may also give user some way to access `makeHot` in case they want to allow hot-reloading for arbitrary classes inside the module:\n\n##### AnonComponents.js\n```javascript\n// The user still doesn't need to know these lines are being inserted by the tool:\nmodule.makeHot = SOME_STORAGE_SHARED_BETWEEN_VERSIONS_OF_SAME_MODULE.makeHot;\nif (!module.makeHot) {\n  // put the function into some sane place (e.g. module.makeHot) without relying on hidden variables\n  module.makeHot = SOME_STORAGE_SHARED_BETWEEN_VERSIONS_OF_SAME_MODULE.makeHot = require('react-hot-api')(require('react/lib/ReactMount'));\n}\n// You might generate the code above with your build tool\n// to hide hot reloading mechanics from user.\n// ================================================\n\n\n\nvar React = require('react');\n\nfunction createLabelComponent(str) {\n  var cls = React.createClass({\n    render: function () {\n      return <span>{str}</span>;\n    }\n  });\n  \n  // ... but you may give user freedom to do this:\n  if (module.makeHot) { // we're in development and makeHot is available\n    cls = module.makeHot(cls, str); // use parameter as unique ID for anon class\n  }\n  \n  return cls;\n}\n\n// These will be hot-reloadable:\nvar Foo = createLabelComponent('Foo');\nvar Bar = createLabelComponent('Bar');\n```\n\n### Thanks\n\n* [Tobias Koppers](https://github.com/sokra) for Webpack and HMR;\n* [Johannes Lumpe](https://github.com/johanneslumpe) and [Ben Alpert](https://github.com/spicyj) for helping me come up with the original hot reloading approach I'm still using here;\n* [Omar Skalli](https://github.com/Chetane) for coming up with an approach for forcing tree update that is compatible with ES6 classes [just the moment I needed it most](https://twitter.com/dan_abramov/status/543174410493239297);\n* [Kyle Mathews](http://github.com/KyleAMathews) for being the first person to actually use hot loader and helping spread the word when it was in initial stages;\n* [Christopher Chedeau](https://github.com/vjeux) for retweeting my horrendously hacked together proof of concept video, overwhelming response from which gave me the incentive to actually finish this thing;\n* Bret Victor for making me think live editing should be the norm, although he probably hates what people do after watching his videos.\n","readmeFilename":"README.md","_id":"react-hot-api@0.4.7","_shasum":"a7e22a56d252e11abd9366b61264cf4492c58171","_resolved":"https://registry.npmjs.org/react-hot-api/-/react-hot-api-0.4.7.tgz","_from":"https://registry.npmjs.org/react-hot-api/-/react-hot-api-0.4.7.tgz"}