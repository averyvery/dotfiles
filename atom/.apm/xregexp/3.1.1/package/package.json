{"name":"xregexp","version":"3.1.1","description":"Extended regular expressions","homepage":"http://xregexp.com/","author":{"name":"Steven Levithan","email":"steves_list@hotmail.com"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/slevithan/xregexp.git"},"keywords":["regex","regexp","regular expression","unicode"],"main":"./src/index.js","files":["src"],"scripts":{"build":"browserify src/index.js --standalone XRegExp > xregexp-all.js"},"devDependencies":{"browserify":"^12.0.1"},"readme":"[XRegExp](http://xregexp.com/) 3.1.1\n====================================\n\nXRegExp provides augmented (and extensible) JavaScript regular expressions. You get new modern syntax and flags beyond what browsers support natively. XRegExp is also a regex utility belt with tools to make your client-side grepping and parsing easier, while freeing you from worrying about pesky aspects of JavaScript regexes like cross-browser inconsistencies or manually manipulating `lastIndex`.\n\nXRegExp supports all native ES6 regular expression syntax. It supports Internet Explorer 5.5+, Firefox 1.5+, Chrome, Safari 3+, and Opera 11+. You can also use it with Node.js or as a RequireJS module.\n\n## Performance\n\nXRegExp regexes compile to native `RegExp` objects, and therefore perform just as fast as native regular expressions. There is a tiny extra cost when compiling a pattern for the first time.\n\n## Usage examples\n\n```js\n// Using named capture and flag x (free-spacing and line comments)\nvar date = XRegExp('(?<year>  [0-9]{4} ) -?  # year  \\n\\\n                    (?<month> [0-9]{2} ) -?  # month \\n\\\n                    (?<day>   [0-9]{2} )     # day   ', 'x');\n\n// XRegExp.exec gives you named backreferences on the match result\nvar match = XRegExp.exec('2015-02-22', date);\nmatch.year; // -> '2015'\n\n// It also includes optional pos and sticky arguments\nvar pos = 3;\nvar result = [];\nwhile (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\\d+)>/, pos, 'sticky')) {\n    result.push(match[1]);\n    pos = match.index + match[0].length;\n}\n// result -> ['2', '3', '4']\n\n// XRegExp.replace allows named backreferences in replacements\nXRegExp.replace('2015-02-22', date, '${month}/${day}/${year}');\n// -> '02/22/2015'\nXRegExp.replace('2015-02-22', date, function(match) {\n    return match.month + '/' + match.day + '/' + match.year;\n});\n// -> '02/22/2015'\n\n// In fact, XRegExps compile to RegExps and work perfectly with native methods\ndate.test('2015-02-22');\n// -> true\n\n// The only caveat is that named captures must be referenced using numbered\n// backreferences if used with native methods\n'2015-02-22'.replace(date, '$2/$3/$1');\n// -> '02/22/2015'\n\n// Extract every other digit from a string using XRegExp.forEach\nvar evens = [];\nXRegExp.forEach('1a2345', /\\d/, function(match, i) {\n    if (i % 2) evens.push(+match[0]);\n});\n// evens -> [2, 4]\n\n// Get numbers within <b> tags using XRegExp.matchChain\nXRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [\n    XRegExp('(?is)<b>.*?</b>'),\n    /\\d+/\n]);\n// -> ['2', '4', '56']\n\n// You can also pass forward and return specific backreferences\nvar html = '<a href=\"http://xregexp.com/\">XRegExp</a>' +\n           '<a href=\"http://www.google.com/\">Google</a>';\nXRegExp.matchChain(html, [\n    {regex: /<a href=\"([^\"]+)\">/i, backref: 1},\n    {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}\n]);\n// -> ['xregexp.com', 'www.google.com']\n\n// Merge strings and regexes into a single pattern with updated backreferences\nXRegExp.union(['a+b*c', /(dog)\\1/, /(cat)\\1/], 'i');\n// -> /a\\+b\\*c|(dog)\\1|(cat)\\2/i\n```\n\nThese examples give the flavor of what's possible, but XRegExp has more syntax, flags, methods, options, and browser fixes that aren't shown here. You can even augment XRegExp's regular expression syntax with addons (see below) or write your own. See [xregexp.com](http://xregexp.com/) for details.\n\n## Addons\n\nYou can either load addons individually, or bundle all addons with XRegExp by loading `xregexp-all.js`.\n\n### Unicode\n\nIf not using `xregexp-all.js`, first include the Unicode Base script and then one or more of the addons for Unicode blocks, categories, properties, or scripts.\n\nThen you can do this:\n\n```js\n// Test the Unicode category L (Letter)\nvar unicodeWord = XRegExp('^\\\\pL+$');\nunicodeWord.test('Русский'); // -> true\nunicodeWord.test('日本語'); // -> true\nunicodeWord.test('العربية'); // -> true\n\n// Test some Unicode scripts\nXRegExp('^\\\\p{Hiragana}+$').test('ひらがな'); // -> true\nXRegExp('^[\\\\p{Latin}\\\\p{Common}]+$').test('Über Café.'); // -> true\n```\n\nBy default, `\\p{…}` and `\\P{…}` support the Basic Multilingual Plane (i.e. code points up to `U+FFFF`). You can opt-in to full 21-bit Unicode support (with code points up to `U+10FFFF`) on a per-regex basis by using flag `A`. In XRegExp, this is called *astral mode*. You can automatically add flag `A` for all new regexes by running `XRegExp.install('astral')`. When in astral mode, `\\p{…}` and `\\P{…}` always match a full code point rather than a code unit, using surrogate pairs for code points above `U+FFFF`.\n\n```js\n// Using flag A to match astral code points\nXRegExp('^\\\\pS$').test('💩'); // -> false\nXRegExp('^\\\\pS$', 'A').test('💩'); // -> true\nXRegExp('(?A)^\\\\pS$').test('💩'); // -> true\n// Using surrogate pair U+D83D U+DCA9 to represent U+1F4A9 (pile of poo)\nXRegExp('(?A)^\\\\pS$').test('\\uD83D\\uDCA9'); // -> true\n\n// Implicit flag A\nXRegExp.install('astral');\nXRegExp('^\\\\pS$').test('💩'); // -> true\n```\n\nOpting in to astral mode disables the use of `\\p{…}` and `\\P{…}` within character classes. In astral mode, use e.g. `(\\pL|[0-9_])+` instead of `[\\pL0-9_]+`.\n\nXRegExp uses Unicode 8.0.0.\n\n### XRegExp.build\n\nBuild regular expressions using named subpatterns, for readability and pattern reuse:\n\n```js\nvar time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {\n    hours: XRegExp.build('{{h12}} : | {{h24}}', {\n        h12: /1[0-2]|0?[1-9]/,\n        h24: /2[0-3]|[01][0-9]/\n    }),\n    minutes: /^[0-5][0-9]$/\n});\n\ntime.test('10:59'); // -> true\nXRegExp.exec('10:59', time).minutes; // -> '59'\n```\n\nNamed subpatterns can be provided as strings or regex objects. A leading `^` and trailing unescaped `$` are stripped from subpatterns if both are present, which allows embedding independently-useful anchored patterns. `{{…}}` tokens can be quantified as a single unit. Any backreferences in the outer pattern or provided subpatterns are automatically renumbered to work correctly within the larger combined pattern. The syntax `({{name}})` works as shorthand for named capture via `(?<name>{{name}})`. Named subpatterns cannot be embedded within character classes.\n\nSee also: *[Creating Grammatical Regexes Using XRegExp.build](http://blog.stevenlevithan.com/archives/grammatical-patterns-xregexp-build)*.\n\n### XRegExp.matchRecursive\n\nMatch recursive constructs using XRegExp pattern strings as left and right delimiters:\n\n```js\nvar str = '(t((e))s)t()(ing)';\nXRegExp.matchRecursive(str, '\\\\(', '\\\\)', 'g');\n// -> ['t((e))s', '', 'ing']\n\n// Extended information mode with valueNames\nstr = 'Here is <div> <div>an</div></div> example';\nXRegExp.matchRecursive(str, '<div\\\\s*>', '</div>', 'gi', {\n    valueNames: ['between', 'left', 'match', 'right']\n});\n/* -> [\n{name: 'between', value: 'Here is ',       start: 0,  end: 8},\n{name: 'left',    value: '<div>',          start: 8,  end: 13},\n{name: 'match',   value: ' <div>an</div>', start: 13, end: 27},\n{name: 'right',   value: '</div>',         start: 27, end: 33},\n{name: 'between', value: ' example',       start: 33, end: 41}\n] */\n\n// Omitting unneeded parts with null valueNames, and using escapeChar\nstr = '...{1}.\\\\{{function(x,y){return {y:x}}}';\nXRegExp.matchRecursive(str, '{', '}', 'g', {\n    valueNames: ['literal', null, 'value', null],\n    escapeChar: '\\\\'\n});\n/* -> [\n{name: 'literal', value: '...',  start: 0, end: 3},\n{name: 'value',   value: '1',    start: 4, end: 5},\n{name: 'literal', value: '.\\\\{', start: 6, end: 9},\n{name: 'value',   value: 'function(x,y){return {y:x}}', start: 10, end: 37}\n] */\n\n// Sticky mode via flag y\nstr = '<1><<<2>>><3>4<5>';\nXRegExp.matchRecursive(str, '<', '>', 'gy');\n// -> ['1', '<<2>>', '3']\n```\n\n`XRegExp.matchRecursive` throws an error if it scans past an unbalanced delimiter in the target string.\n\n## Installation and usage\n\nIn browsers (bundle XRegExp with all of its addons):\n\n```html\n<script src=\"xregexp-all.js\"></script>\n```\n\nUsing [npm](https://www.npmjs.com/):\n\n```bash\nnpm install xregexp\n```\n\nIn [Node.js](http://nodejs.org/):\n\n```js\nvar XRegExp = require('xregexp');\n```\n\nIn an AMD loader like [RequireJS](http://requirejs.org/):\n\n```js\nrequire({paths: {xregexp: 'xregexp-all'}}, ['xregexp'], function(XRegExp) {\n    console.log(XRegExp.version);\n});\n```\n\n## About\n\nXRegExp copyright 2007-2016 by [Steven Levithan](http://stevenlevithan.com/).\n\nUnicode range generators by [Mathias Bynens](http://mathiasbynens.be/), and adapted from his [unicode-data](https://github.com/mathiasbynens/unicode-data) project. Uses [Jasmine](http://jasmine.github.io/) for unit tests, and [Benchmark.js](http://benchmarkjs.com) for performance tests. `XRegExp.build` inspired by [RegExp.create](http://lea.verou.me/2011/03/create-complex-regexps-more-easily/) by [Lea Verou](http://lea.verou.me/). `XRegExp.union` inspired by [Ruby](http://www.ruby-lang.org/). XRegExp's syntax extensions and flags come from [Perl](http://www.perl.org/), [.NET](http://www.microsoft.com/net), etc.\n\nAll code, including addons, tools, and tests, is released under the terms of the [MIT License](http://mit-license.org/).\n\nFork me to show support, fix, and extend.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/slevithan/xregexp/issues"},"_id":"xregexp@3.1.1","_shasum":"8ee18d75ef5c7cb3f9967f8d29414a6ca5b1a184","_resolved":"https://registry.npmjs.org/xregexp/-/xregexp-3.1.1.tgz","_from":"https://registry.npmjs.org/xregexp/-/xregexp-3.1.1.tgz"}