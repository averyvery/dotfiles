{"name":"webpack-stats-plugin","version":"0.1.1","description":"Webpack stats plugin","main":"webpack-stats-plugin.js","dependencies":{},"devDependencies":{"gulp":"3.8.10","gulp-eslint":"0.2.2","gulp-jscs":"1.4.0","gulp-mdox":"0.0.2","webpack":"1.6.0"},"repository":{"type":"git","url":"git+https://github.com/FormidableLabs/webpack-stats-plugin.git"},"keywords":["webpack"],"author":{"name":"Ryan Roemer","email":"ryan.roemer@formidablelabs.com"},"license":"MIT","bugs":{"url":"https://github.com/FormidableLabs/webpack-stats-plugin/issues"},"scripts":{"test":"gulp check","clean":"rm -rf demo/stats.json demo/build*","build-demo":"npm run clean && cd demo && webpack"},"readme":"Webpack Stats Plugin\n====================\n\n[![Build Status][trav_img]][trav_site]\n\nThis plugin will ingest the webpack\n[stats](https://github.com/webpack/docs/wiki/node.js-api#stats) object,\nprocess / transform the object and write out to a file for further consumption.\n\nThe most common use case is building a hashed bundle and wanting to\nprogrammatically refer to the correct bundle path in your Node.js server.\n\n## Installation\n\nThe plugin is available via [npm](https://www.npmjs.com/package/webpack-stats-plugin):\n\n```\n$ npm install --save webpack-stats-plugin\n```\n\n## Examples\n\n### Stats Writer Plugin\n\n```js\nvar StatsWriterPlugin = require(\"webpack-stats-plugin\").StatsWriterPlugin;\n\nmodule.exports = {\n  plugins: [\n    // Everything else **first**.\n\n    // Write out stats file to build directory.\n    new StatsWriterPlugin({\n      filename: \"stats.json\" // Default\n    })\n  ]\n}\n```\n\n## Plugins\n\n* [`StatsWriterPlugin(opts)`](#statswriterplugin-opts-)\n\n### `StatsWriterPlugin(opts)`\n* **opts** (`Object`) options\n* **opts.filename** (`String`) output file name (Default: &quot;stat.json&quot;)\n* **opts.fields** (`Array`) fields of stats obj to keep (Default: \\[&quot;assetsByChunkName&quot;\\])\n* **opts.transform** (`Function`) transform stats obj (Default: `JSON.stringify()`)\n\nStats writer module.\n\nStats can be a string or array (we\"ll have array from using source maps):\n\n```js\n\"assetsByChunkName\": {\n  \"main\": [\n    \"cd6371d4131fbfbefaa7.bundle.js\",\n    \"../js-map/cd6371d4131fbfbefaa7.bundle.js.map\"\n  ]\n},\n```\n\n**Note**: The stats object is **big**. It includes the entire source included\nin a bundle. Thus, we default `opts.fields` to `[\"assetsByChunkName\"]` to\nonly include those. However, if you want the _whole thing_ (maybe doing an\n`opts.transform` function), then you can set `fields: null` in options to\nget **all** of the stats object.\n\nSee:\n- http://webpack.github.io/docs/long-term-caching.html#get-filenames-from-stats\n- https://github.com/webpack/docs/wiki/node.js-api#stats\n\n**`filename`**: The `opts.filename` option can be a file name or path relative to\n`output.path` in webpack configuration. It should not be absolute.\n\n**`transform`**: By default, the retrieved stats object is `JSON.stringify`'ed\nbut by supplying an alternate transform you can target _any_ output format.\nSee [`demo/webpack.config.js`](demo/webpack.config.js) for various examples\nincluding Markdown output.\n\n## Contributions\n\nContributions welcome! Make sure to pass `$ gulp check`.\n\n[trav]: https://travis-ci.org/\n[trav_img]: https://api.travis-ci.org/FormidableLabs/webpack-stats-plugin.svg\n[trav_site]: https://travis-ci.org/FormidableLabs/webpack-stats-plugin\n","readmeFilename":"README.md","homepage":"https://github.com/FormidableLabs/webpack-stats-plugin#readme","_id":"webpack-stats-plugin@0.1.1","_shasum":"0d6f607272f89ea2880f7274c5848feb585eb7f9","_resolved":"https://registry.npmjs.org/webpack-stats-plugin/-/webpack-stats-plugin-0.1.1.tgz","_from":"https://registry.npmjs.org/webpack-stats-plugin/-/webpack-stats-plugin-0.1.1.tgz"}