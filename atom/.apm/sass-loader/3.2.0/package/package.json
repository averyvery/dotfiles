{"name":"sass-loader","version":"3.2.0","description":"Sass loader for webpack","main":"index.js","scripts":{"create-spec":"node test/tools/runCreateSpec.js","pretest":"node test/tools/runCreateSpec.js","test":"mocha -R spec","posttest":"jshint index.js test","test-bootstrap-sass":"webpack-dev-server --config test/bootstrapSass/webpack.config.js --content-base ./test/bootstrapSass","test-source-map":"webpack-dev-server --config test/sourceMap/webpack.config.js --content-base ./test/sourceMap","test-watch":"webpack --config test/watch/webpack.config.js","test-hmr":"webpack-dev-server --config test/hmr/webpack.config.js --content-base ./test/hmr --hot --inline","test-spec":"mocha -R spec test/spec.test.js"},"keywords":["sass","libsass","webpack","loader"],"repository":{"type":"git","url":"git://github.com/jtangelder/sass-loader.git"},"author":{"name":"J. Tangelder"},"license":"MIT","peerDependencies":{"node-sass":"^3.4.2","webpack":"^1.12.6"},"dependencies":{"async":"^1.4.0","loader-utils":"^0.2.5","object-assign":"^4.0.1"},"devDependencies":{"bootstrap-sass":"^3.3.5","css-loader":"^0.23.0","enhanced-require":"^0.5.0-beta6","file-loader":"^0.8.4","jshint":"^2.8.0","mocha":"^2.3.4","node-sass":"3.4.2","raw-loader":"^0.5.1","should":"^8.2.2","style-loader":"^0.13.0","webpack":"^1.12.14","webpack-dev-server":"^1.7.0"},"readme":"# Sass loader for [webpack](http://webpack.github.io/)\n\n## Install\n\n`npm install sass-loader node-sass webpack --save-dev`\n\nThe sass-loader requires [node-sass](https://github.com/sass/node-sass) and [webpack](https://github.com/webpack/webpack)\nas [`peerDependency`](https://docs.npmjs.com/files/package.json#peerdependencies). Thus you are able to specify the required versions accurately.\n\n---\n\n## Usage\n\n[Documentation: Using loaders](http://webpack.github.io/docs/using-loaders.html)\n\n``` javascript\nvar css = require(\"!raw!sass!./file.scss\");\n// returns compiled css code from file.scss, resolves Sass imports\nvar css = require(\"!css!sass!./file.scss\");\n// returns compiled css code from file.scss, resolves Sass and CSS imports and url(...)s\n```\n\nUse in tandem with the [`style-loader`](https://github.com/webpack/style-loader) and [`css-loader`](https://github.com/webpack/css-loader) to add the css rules to your document:\n\n``` javascript\nrequire(\"!style!css!sass!./file.scss\");\n```\n*Please note: If you encounter module errors complaining about a missing `style` or `css` module, make sure you have installed all required loaders via npm.*\n\n### Apply via webpack config\n\nIt's recommended to adjust your `webpack.config` so `style!css!sass!` is applied automatically on all files ending on `.scss`:\n\n``` javascript\nmodule.exports = {\n  ...\n  module: {\n    loaders: [\n      {\n        test: /\\.scss$/,\n        loaders: [\"style\", \"css\", \"sass\"]\n      }\n    ]\n  }\n};\n```\n\nThen you only need to write: `require(\"./file.scss\")`.\n\n### Sass options\n\nYou can pass options to node-sass by defining a `sassLoader`-property on your `webpack.config.js`. See [node-sass](https://github.com/andrew/node-sass) for all available Sass-options.\n\n```javascript\nmodule.exports = {\n  ...\n  module: {\n    loaders: [\n      {\n        test: /\\.scss$/,\n        loaders: [\"style\", \"css\", \"sass\"]\n      }\n    ]\n  },\n  sassLoader: {\n    includePaths: [path.resolve(__dirname, \"./some-folder\")]\n  }\n};\n```\n\nPassing your options as [query parameters](http://webpack.github.io/docs/using-loaders.html#query-parameters) is also supported, but can get confusing if you need to set a lot of options.\n\nIf you need to define two different loader configs, you can also change the config's property name via `sass?config=otherSassLoaderConfig`:\n\n```javascript\nmodule.exports = {\n  ...\n  module: {\n    loaders: [\n      {\n        test: /\\.scss$/,\n        loaders: [\"style\", \"css\", \"sass?config=otherSassLoaderConfig\"]\n      }\n    ]\n  },\n  otherSassLoaderConfig: {\n    ...\n  }\n};\n```\n\n### Imports\n\nwebpack provides an [advanced mechanism to resolve files](http://webpack.github.io/docs/resolving.html). The sass-loader uses node-sass' custom importer feature to pass all queries to the webpack resolving engine. Thus you can import your Sass modules from `node_modules`. Just prepend them with a `~` to tell webpack that this is not a relative import:\n\n```css\n@import \"~bootstrap/less/bootstrap\";\n```\n\nIt's important to only prepend it with `~`, because `~/` resolves to the home directory. webpack needs to distinguish between `bootstrap` and `~bootstrap` because CSS- and Sass-files have no special syntax for importing relative files. Writing `@import \"file\"` is the same as `@import \"./file\";`\n\n### Environment variables\n\nIf you want to prepend Sass code before the actual entry file, you can simply set the `data`-option. In this case, the sass-loader will not override the `data`-option but just append the entry's content. This is especially useful when some of your Sass variables depend on the environment:\n\n```javascript\nmodule.exports = {\n  ...\n  sassLoader: {\n    data: \"$env: \" + process.env.ENV + \";\"\n  }\n};\n```\n\n\n### Problems with `url(...)`\n\nSince Sass/[libsass](https://github.com/sass/libsass) does not provide [url rewriting](https://github.com/sass/libsass/issues/532), all linked assets must be relative to the output.\n\n- If you're just generating CSS without passing it to the css-loader, it must be relative to your web root.\n- If you pass the generated CSS on to the css-loader, all urls must be relative to the entry-file (e.g. `main.scss`).\n\nMore likely you will be disrupted by this second issue. It is natural to expect relative references to be resolved against the `.scss`-file in which they are specified (like in regular `.css`-files). Thankfully there are a two solutions to this problem:\n\n- Add the missing url rewriting using the [resolve-url-loader](https://github.com/bholloway/resolve-url-loader). Place it directly after the sass-loader in the loader chain.\n- Library authors usually provide a variable to modify the asset path. [bootstrap-sass](https://github.com/twbs/bootstrap-sass) for example has an `$icon-font-path`. Check out [this working bootstrap example](https://github.com/jtangelder/sass-loader/tree/master/test/bootstrapSass).\n\n### Extracting stylesheets\n\nBundling CSS with webpack has some nice advantages like referencing images and fonts with hashed urls or [hot module replacement](http://webpack.github.io/docs/hot-module-replacement-with-webpack.html) in development. In production, on the other hand, it's not a good idea to apply your stylesheets depending on JS execution. Rendering may be delayed or even a [FOUC](https://en.wikipedia.org/wiki/Flash_of_unstyled_content) might be visible. Thus it's often still better to have them as separate files in your final production build.\n\nThere are two possibilties to extract a stylesheet from the bundle:\n\n- [extract-loader](https://github.com/peerigon/extract-loader) (simpler, but specialized on the css-loader's output)\n- [extract-text-webpack-plugin](https://github.com/webpack/extract-text-webpack-plugin) (more complex, but works in all use-cases)\n\n### Source maps\n\nTo enable CSS Source maps, you'll need to pass the `sourceMap`-option to the sass- *and* the css-loader. Your `webpack.config.js` should look like this:\n\n```javascript\nmodule.exports = {\n    ...\n    devtool: \"source-map\", // or \"inline-source-map\"\n    module: {\n        loaders: [\n            {\n                test: /\\.scss$/,\n                loaders: [\"style\", \"css?sourceMap\", \"sass?sourceMap\"]\n            }\n        ]\n    }\n};\n```\n\nIf you want to edit the original Sass files inside Chrome, [there's a good blog post](https://medium.com/@toolmantim/getting-started-with-css-sourcemaps-and-in-browser-sass-editing-b4daab987fb0). Checkout [test/sourceMap](https://github.com/jtangelder/sass-loader/tree/master/test) for a running example.\n\n## License\n\nMIT (http://www.opensource.org/licenses/mit-license.php)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/jtangelder/sass-loader/issues"},"homepage":"https://github.com/jtangelder/sass-loader#readme","_id":"sass-loader@3.2.0","_shasum":"b90ac6c71da27cfd6e7eda5409a5a803193c329b","_resolved":"https://registry.npmjs.org/sass-loader/-/sass-loader-3.2.0.tgz","_from":"https://registry.npmjs.org/sass-loader/-/sass-loader-3.2.0.tgz"}