{"name":"jsdom","version":"7.2.2","description":"A JavaScript implementation of the DOM and HTML standards","keywords":["dom","html","whatwg","w3c"],"maintainers":[{"name":"Elijah Insua","email":"tmpvar@gmail.com","url":"http://tmpvar.com"},{"name":"Domenic Denicola","email":"d@domenic.me","url":"https://domenic.me/"},{"name":"Sebastian Mayr","email":"sebmaster16@gmail.com","url":"http://blog.smayr.name/"},{"name":"Joris van der Wel","email":"joris@jorisvanderwel.com"}],"license":"MIT","repository":{"type":"git","url":"git+https://github.com/tmpvar/jsdom.git"},"dependencies":{"abab":"^1.0.0","acorn":"^2.4.0","acorn-globals":"^1.0.4","cssom":">= 0.3.0 < 0.4.0","cssstyle":">= 0.2.29 < 0.3.0","escodegen":"^1.6.1","nwmatcher":">= 1.3.7 < 2.0.0","parse5":"^1.5.1","request":"^2.55.0","sax":"^1.1.4","symbol-tree":">= 3.1.0 < 4.0.0","tough-cookie":"^2.2.0","webidl-conversions":"^2.0.0","whatwg-url-compat":"~0.6.5","xml-name-validator":">= 2.0.1 < 3.0.0"},"devDependencies":{"benchmark":"1.0.0","browserify":"^11.1.0","colors":"^1.0.3","eslint":"^1.5.1","eslint-plugin-html":"^1.0.4","fs-readdir-recursive":"^1.0.0","http-server":"^0.8.0","jscs":"^2.5.0","nodeunit":"0.9.1","optimist":"0.6.1","portfinder":"0.4.0","q":"^1.2.0","selenium-standalone":"^4.6.1","st":"^0.5.5","wd":"0.3.12","webidl2js":"^3.0.0"},"browser":{"canvas":false,"vm":"./lib/jsdom/vm-shim.js"},"scripts":{"prepublish":"npm run convert-idl","pretest":"npm run convert-idl && git submodule update --init --recursive","test":"node ./test/runner","test-browser":"node ./test/browser-runner","lint":"jscs lib/ && jscs test/ && eslint . && eslint test/web-platform-tests/to-upstream --ext .html","update-authors":"git log --format=\"%aN <%aE>\" | sort -f | uniq > AUTHORS.txt","benchmark":"node ./benchmark/runner","benchmark-browser":"node ./benchmark/runner --bundle","convert-idl":"node ./scripts/webidl/convert"},"main":"./lib/jsdom","readme":"# jsdom\n\nA JavaScript implementation of the WHATWG DOM and HTML standards, for use with [Node.js](https://nodejs.org/).\n\n## Install\n\n```bash\n$ npm install jsdom\n```\n\nNote that as of our 7.0.0 release, jsdom requires Node.js 4 or newer ([why?](https://github.com/tmpvar/jsdom/blob/master/Changelog.md#700)). In the meantime you are still welcome to install a release in [the 3.x series](https://github.com/tmpvar/jsdom/tree/3.x) if you use legacy Node.js versions like 0.10 or 0.12. There are also various releases between 3.x and 7.0.0 that work with various io.js versions.\n\n## Human contact\n\n- [Mailing list](http://groups.google.com/group/jsdom)\n- IRC channel: [#jsdom on freenode](irc://irc.freenode.net/jsdom)\n\n## Easymode: `jsdom.env`\n\n`jsdom.env` is an API that allows you to throw a bunch of stuff at it, and it will generally do the right thing.\n\nYou can use it with a URL\n\n```js\n// Count all of the links from the io.js build page\nvar jsdom = require(\"jsdom\");\n\njsdom.env(\n  \"https://iojs.org/dist/\",\n  [\"http://code.jquery.com/jquery.js\"],\n  function (err, window) {\n    console.log(\"there have been\", window.$(\"a\").length - 4, \"io.js releases!\");\n  }\n);\n```\n\nor with raw HTML\n\n```js\n// Run some jQuery on a html fragment\nvar jsdom = require(\"jsdom\");\n\njsdom.env(\n  '<p><a class=\"the-link\" href=\"https://github.com/tmpvar/jsdom\">jsdom!</a></p>',\n  [\"http://code.jquery.com/jquery.js\"],\n  function (err, window) {\n    console.log(\"contents of a.the-link:\", window.$(\"a.the-link\").text());\n  }\n);\n```\n\nor with a configuration object\n\n```js\n// Print all of the news items on Hacker News\nvar jsdom = require(\"jsdom\");\n\njsdom.env({\n  url: \"http://news.ycombinator.com/\",\n  scripts: [\"http://code.jquery.com/jquery.js\"],\n  done: function (err, window) {\n    var $ = window.$;\n    console.log(\"HN Links\");\n    $(\"td.title:not(:last) a\").each(function() {\n      console.log(\" -\", $(this).text());\n    });\n  }\n});\n```\n\nor with raw JavaScript source\n\n```js\n// Print all of the news items on Hacker News\nvar jsdom = require(\"jsdom\");\nvar fs = require(\"fs\");\nvar jquery = fs.readFileSync(\"./path/to/jquery.js\", \"utf-8\");\n\njsdom.env({\n  url: \"http://news.ycombinator.com/\",\n  src: [jquery],\n  done: function (err, window) {\n    var $ = window.$;\n    console.log(\"HN Links\");\n    $(\"td.title:not(:last) a\").each(function () {\n      console.log(\" -\", $(this).text());\n    });\n  }\n});\n```\n\n### How it works\n\nThe do-what-I-mean API is used like so:\n\n```js\njsdom.env(string, [scripts], [config], callback);\n```\n\n- `string`: may be a URL, file name, or HTML fragment\n- `scripts`: a string or array of strings, containing file names or URLs that will be inserted as `<script>` tags\n- `config`: see below\n- `callback`: takes two arguments\n  - `err`: either `null`, if nothing goes wrong, or an error, if the window could not be created\n  - `window`: a brand new `window`, if there wasn't an error\n\n_Example:_\n\n```js\njsdom.env(html, function (err, window) {\n  // free memory associated with the window\n  window.close();\n});\n```\n\nIf you would like to specify a configuration object only:\n\n```js\njsdom.env(config);\n```\n\n- `config.html`: a HTML fragment\n- `config.file`: a file which jsdom will load HTML from; the resulting window's `location.href` will be a `file://` URL.\n- `config.url`: sets the resulting window's `location.href`; if `config.html` and `config.file` are not provided, jsdom will load HTML from this URL.\n- `config.scripts`: see `scripts` above.\n- `config.src`: an array of JavaScript strings that will be evaluated against the resulting document. Similar to `scripts`, but it accepts JavaScript instead of paths/URLs.\n- `config.cookieJar`: cookie jar which will be used by document and related resource requests. Can be created by `jsdom.createCookieJar()` method. Useful to share cookie state among different documents as browsers does.\n- `config.parsingMode`: either `\"auto\"`, `\"html\"`, or `\"xml\"`. The default is `\"auto\"`, which uses HTML behavior unless `config.url` responds with an XML `Content-Type`, or `config.file` contains a filename ending in `.xml` or `.xhtml`. Setting to `\"xml\"` will attempt to parse the document as an XHTML document. (jsdom is [currently only OK at doing that](https://github.com/tmpvar/jsdom/issues/885).)\n- `config.referrer`: the new document will have this referrer.\n- `config.cookie`: manually set a cookie value, e.g. `'key=value; expires=Wed, Sep 21 2011 12:00:00 GMT; path=/'`. Accepts cookie string or array of cookie strings.\n- `config.headers`: an object giving any headers that will be used while loading the HTML from `config.url`, if applicable.\n- `config.userAgent`: the user agent string used in requests; defaults to `Node.js (#process.platform#; U; rv:#process.version#)`\n- `config.features`: see Flexibility section below. **Note**: the default feature set for `jsdom.env` does _not_ include fetching remote JavaScript and executing it. This is something that you will need to _carefully_ enable yourself.\n- `config.resourceLoader`: a function that intercepts subresource requests and allows you to re-route them, modify, or outright replace them with your own content. More below.\n- `config.done`, `config.onload`, `config.created`: see below.\n- `config.concurrentNodeIterators`: the maximum amount of `NodeIterator`s that you can use at the same time. The default is `10`; setting this to a high value will hurt performance.\n- `config.virtualConsole`: a virtual console instance that can capture the windowâ€™s console output; see the \"Capturing Console Output\" examples.\n- `config.pool`: an object describing which agents to use for the requests; defaults to `{ maxSockets: 6 }`, see [request module](https://github.com/request/request#requestoptions-callback) for more details.\n- `config.agentOptions`: the agent options; defaults to `{ keepAlive: true, keepAliveMsecs: 115000 }`, see [http api](https://nodejs.org/api/http.html) for more details.\n\nNote that at least one of the callbacks (`done`, `onload`, or `created`) is required, as is one of `html`, `file`, or `url`.\n\n### Initialization lifecycle\n\nIf you just want to load the document and execute it, the `done` callback shown above is the simplest. If anything goes wrong while loading the document and creating the window, the problem will show up in the `error` passed as the first argument.\n\nHowever, if you want more control over or insight into the initialization lifecycle, you'll want to use the `created` and/or `loaded` callbacks:\n\n#### `created(error, window)`\n\nThe `created` callback is called as soon as the window is created, or if that process fails. You may access all `window` properties here; however, `window.document` is not ready for use yet, as the HTML has not been parsed.\n\nThe primary use-case for `created` is to modify the window object (e.g. add new functions on built-in prototypes) before any scripts execute.\n\nYou can also set an event handler for `'load'` or other events on the window if you wish.\n\nIf the `error` argument is non-`null`, it will contain whatever loading or initialization error caused the window creation to fail; in that case `window` will not be passed.\n\n#### `onload(window)`\n\nThe `onload` callback is called along with the window's `'load'` event. This means it will only be called if creation succeeds without error. Note that by the time it has called, any external resources will have been downloaded, and any `<script>`s will have finished executing.\n\n#### `done(error, window)`\n\nNow that you know about `created` and `onload`, you can see that `done` is essentially both of them smashed together:\n\n- If window creation fails, then `error` will be the creation error.\n- Otherwise, `window` will be a fully-loaded window, with all external resources downloaded and `<script>`s executed.\n\n#### Dealing with asynchronous script loading\n\nIf you load scripts asynchronously, e.g. with a module loader like RequireJS, none of the above hooks will really give you what you want. There's nothing, either in jsdom or in browsers, to say \"notify me after all asynchronous loads have completed.\" The solution is to use the mechanisms of the framework you are using to notify about this finishing up. E.g., with RequireJS, you could do\n\n```js\n// On the Node.js/io.js side:\nvar window = jsdom.jsdom(...).defaultView;\nwindow.onModulesLoaded = function () {\n  console.log(\"ready to roll!\");\n};\n```\n\n```html\n<!-- Inside the HTML you supply to jsdom -->\n<script>\nrequirejs([\"entry-module\"], function () {\n  window.onModulesLoaded();\n});\n</script>\n```\n\nFor more details, see the discussion in [#640](https://github.com/tmpvar/jsdom/issues/640), especially [@matthewkastor](https://github.com/matthewkastor)'s [insightful comment](https://github.com/tmpvar/jsdom/issues/640#issuecomment-22216965).\n\n#### Listening for script errors during initialization\n\nAlthough it is easy to listen for script errors after initialization, via code like\n\n```js\nvar window = jsdom.jsdom(...).defaultView;\nwindow.addEventListener(\"error\", function (event) {\n  console.error(\"script error!!\", event.error);\n});\n```\n\nit is often also desirable to listen for any script errors during initialization, or errors loading scripts passed to `jsdom.env`. To do this, use the virtual console feature, described in more detail later:\n\n```js\nvar virtualConsole = jsdom.createVirtualConsole();\nvirtualConsole.on(\"jsdomError\", function (error) {\n  console.error(error.stack, error.detail);\n});\n\nvar window = jsdom.jsdom(..., { virtualConsole }).defaultView;\n```\n\nYou also get this functionality for free by default if you use `virtualConsole.sendTo`; again, see more below:\n\n```js\nvar virtualConsole = jsdom.createVirtualConsole().sendTo(console);\nvar window = jsdom.jsdom(..., { virtualConsole }).defaultView;\n```\n\n### On running scripts and being safe\n\nBy default, `jsdom.env` will not process and run external JavaScript, since our sandbox is not foolproof. That is, code running inside the DOM's `<script>`s can, if it tries hard enough, get access to the Node environment, and thus to your machine. If you want to (carefully!) enable running JavaScript, you can use `jsdom.jsdom`, `jsdom.jQueryify`, or modify the defaults passed to `jsdom.env`.\n\n## For the hardcore: `jsdom.jsdom`\n\nThe `jsdom.jsdom` method does fewer things automatically; it takes in only HTML source, and it does not allow you to separately supply scripts that it will inject and execute. It just gives you back a `document` object, with usable `document.defaultView`, and starts asynchronously executing any `<script>`s included in the HTML source. You can listen for the `'load'` event to wait until scripts are done loading and executing, just like you would in a normal HTML page.\n\nUsage of the API generally looks like this:\n\n```js\nvar jsdom = require(\"jsdom\").jsdom;\nvar doc = jsdom(markup, options);\nvar window = doc.defaultView;\n```\n\n- `markup` is a HTML document to be parsed. You can also pass `undefined` to get the basic document, equivalent to what a browser will give if you open up an empty `.html` file.\n\n- `options`: see the explanation of the `config` object above.\n\n### Flexibility\n\nOne of the goals of jsdom is to be as minimal and light as possible. This section details how someone can change the behavior of `Document`s before they are created. These features are baked into the `DOMImplementation` that every `Document` has, and may be tweaked in two ways:\n\n1. When you create a new `Document`, by overriding the configuration:\n\n  ```js\n  var jsdom = require(\"jsdom\").jsdom;\n  var doc = jsdom(\"<html><body></body></html>\", {\n      features: {\n        FetchExternalResources : [\"link\"]\n      }\n  });\n  ```\n\n  Do note, that this will only affect the document that is currently being created. All other documents will use the defaults specified below (see: Default Features).\n\n2. Before creating any documents, you can modify the defaults for all future documents:\n\n  ```js\n  require(\"jsdom\").defaultDocumentFeatures = {\n      FetchExternalResources: [\"script\"],\n      ProcessExternalResources: false\n  };\n  ```\n\n#### External Resources\n\nDefault features are extremely important for jsdom as they lower the configuration requirement and present developers a set of consistent default behaviors. The following sections detail the available features, their defaults, and the values that jsdom uses.\n\n`FetchExternalResources`\n\n- _Default_: `[\"script\"]`\n- _Allowed_: `[\"script\", \"frame\", \"iframe\", \"link\"]` or `false`\n- _Default for `jsdom.env`_: `false`\n\nEnables/disables fetching files over the file system/HTTP\n\n`ProcessExternalResources`\n\n- _Default_: `[\"script\"]`\n- _Allowed_: `[\"script\"]` or `false`\n- _Default for `jsdom.env`_: `false`\n\nEnables/disables JavaScript execution\n\n`SkipExternalResources`\n\n- _Default_: `false` (allow all)\n- _Allowed_: `/url to be skipped/` or `false`\n- _Example_: `/http:\\/\\/example.org/js/bad\\.js/`\n\nFilters resource downloading and processing to disallow those matching the given regular expression\n\n#### Custom External Resource Loader\n\njsdom lets you intercept subresource requests using `config.resourceLoader`. `config.resourceLoader` expects a function which is called for each subresource request with the following arguments:\n\n- `resource`: a vanilla JavaScript object with the following properties\n  - `element`: the element that requested the resource.\n  - `url`: a parsed URL object.\n  - `cookie`: the content of the HTTP cookie header (`key=value` pairs separated by semicolons).\n  - `baseUrl`: the base URL used to resolve relative URLs.\n  - `defaultFetch(callback)`: a convenience method to fetch the resource online.\n- `callback`: a function to be called with two arguments\n  - `error`: either `null`, if nothing goes wrong, or an `Error` object.\n  - `body`: a string representing the body of the resource.\n\nFor example, fetching all JS files from a different directory and running them in strict mode:\n\n```js\nvar jsdom = require(\"jsdom\");\n\njsdom.env({\n  url: \"http://example.com/\",\n  resourceLoader: function (resource, callback) {\n    var pathname = resource.url.pathname;\n    if (/\\.js$/.test(pathname)) {\n      resource.url.pathname = pathname.replace(\"/js/\", \"/js/raw/\");\n      return resource.defaultFetch(function (err, body) {\n        if (err) return callback(err);\n        callback(null, '\"use strict\";\\n' + body);\n      });\n    } else {\n      return resource.defaultFetch(callback);\n    }\n  },\n  features: {\n    FetchExternalResources: [\"script\"],\n    ProcessExternalResources: [\"script\"],\n    SkipExternalResources: false\n  }\n});\n```\n\nYou can return an object containing an `abort()` function which will be called if the window is closed or stopped before the request ends.\nThe `abort()` function should stop the request and call the callback with an error.\n\nFor example, simulating a long request:\n\n```js\nvar jsdom = require(\"jsdom\");\n\njsdom.env({\n  url: \"http://example.com/\",\n  resourceLoader: function (resource, callback) {\n    if (/\\.json$/.test(pathname)) {\n      var timeout = setTimeout(function() {\n        callback(null, \"{\\\"test\\\":\\\"test\\\"}\");\n      }, 10000);\n      return {\n        abort: function() {\n          clearTimeout(timeout);\n          callback(new Error(\"request canceled by user\"));\n        }\n      };\n    } else {\n      return resource.defaultFetch(callback);\n    }\n  },\n  features: {\n    FetchExternalResources: [\"script\"],\n    ProcessExternalResources: [\"script\"],\n    SkipExternalResources: false\n  }\n});\n```\n\n## Canvas\n\njsdom includes support for using the [canvas](https://npmjs.org/package/canvas) package to extend any `<canvas>` elements with the canvas API. To make this work, you need to include canvas as a dependency in your project, as a peer of jsdom. If jsdom can find the canvas package, it will use it, but if it's not present, then `<canvas>` elements will behave like `<div>`s.\n\n## More Examples\n\n### Creating a browser-like window object\n\n```js\nvar jsdom = require(\"jsdom\").jsdom;\nvar document = jsdom(\"hello world\");\nvar window = document.defaultView;\n\nconsole.log(window.document.documentElement.outerHTML);\n// output: \"<html><head></head><body>hello world</body></html>\"\n\nconsole.log(window.innerWidth);\n// output: 1024\n\nconsole.log(typeof window.document.getElementsByClassName);\n// outputs: function\n```\n\n### jQueryify\n\n```js\nvar jsdom = require(\"jsdom\");\nvar window = jsdom.jsdom().defaultView;\n\njsdom.jQueryify(window, \"http://code.jquery.com/jquery-2.1.1.js\", function () {\n  window.$(\"body\").append('<div class=\"testing\">Hello World, It works</div>');\n\n  console.log(window.$(\".testing\").text());\n});\n```\n\n### Passing objects to scripts inside the page\n\n```js\nvar jsdom = require(\"jsdom\").jsdom;\nvar window = jsdom().defaultView;\n\nwindow.__myObject = { foo: \"bar\" };\n\nvar scriptEl = window.document.createElement(\"script\");\nscriptEl.src = \"anotherScript.js\";\nwindow.document.body.appendChild(scriptEl);\n\n// anotherScript.js will have the ability to read `window.__myObject`, even\n// though it originated in Node.js/io.js!\n```\n\n### Serializing a document\n\n```js\nvar jsdom = require(\"jsdom\").jsdom;\nvar serializeDocument = require(\"jsdom\").serializeDocument;\n\nvar doc = jsdom(\"<!DOCTYPE html>hello\");\n\nserializeDocument(doc) === \"<!DOCTYPE html><html><head></head><body>hello</body></html>\";\ndoc.documentElement.outerHTML === \"<html><head></head><body>hello</body></html>\";\n```\n\n### Sharing cookie state among pages\n\n```js\nvar jsdom = require(\"jsdom\");\nvar cookieJar = jsdom.createCookieJar();\n\njsdom.env({\n    url: 'http://google.com',\n    cookieJar: cookieJar,\n    done: function (err1, window1) {\n        //...\n\n        jsdom.env({\n            url: 'http://code.google.com',\n            cookieJar: cookieJar,\n            done: function (err2, window2) {\n                //...\n            }\n        });\n    }\n});\n```\n\n### Capturing Console Output\n\n#### Forward a window's console output to the Node.js/io.js console\n\n```js\nvar jsdom = require(\"jsdom\");\n\nvar document = jsdom.jsdom(undefined, {\n  virtualConsole: jsdom.createVirtualConsole().sendTo(console)\n});\n```\n\nBy default this will forward all `\"jsdomError\"` events to `console.error`. If you want to maintain only a strict one-to-one mapping of events to method calls, and perhaps handle `\"jsdomErrors\"` yourself, then you can do `sendTo(console, { omitJsdomErrors: true })`.\n\n#### Create an event emitter for a window's console\n\n```js\nvar jsdom = require(\"jsdom\");\n\nvar virtualConsole = jsdom.createVirtualConsole();\n\nvirtualConsole.on(\"log\", function (message) {\n  console.log(\"console.log called ->\", message);\n});\n\nvar document = jsdom.jsdom(undefined, {\n  virtualConsole: virtualConsole\n});\n```\n\nPost-initialization, if you didn't pass in a `virtualConsole` or no longer have a reference to it, you can retreive the `virtualConsole` by using:\n\n```js\nvar virtualConsole = jsdom.getVirtualConsole(window);\n```\n\n#### Virtual console `jsdomError` error reporting\n\nBesides the usual events, corresponding to `console` methods, the virtual console is also used for reporting errors from jsdom itself. This is similar to how error messages often show up in web browser consoles, even if they are not initiated by `console.error`. So far, the following errors are output this way:\n\n- Errors loading external resources (scripts, stylesheets, frames, and iframes)\n- Script execution errors that are not handled by a window `onerror` event handler that returns `true` or calls `event.preventDefault()`\n- Calls to methods, like `window.alert`, which jsdom does not implement, but installs anyway for web compatibility\n\n### Getting a node's location within the source\n\nTo find where a DOM node is within the source document, we provide the `jsdom.nodeLocation` function:\n\n```js\nvar jsdom = require(\"jsdom\");\n\nvar document = jsdom.jsdom(`<p>Hello\n    <img src=\"foo.jpg\">\n  </p>`);\n\nvar bodyEl = document.body; // implicitly created\nvar pEl = document.querySelector(\"p\");\nvar textNode = pEl.firstChild;\nvar imgEl = document.querySelector(\"img\");\n\nconsole.log(jsdom.nodeLocation(bodyEl));   // null; it's not in the source\nconsole.log(jsdom.nodeLocation(pEl));      // { start: 0, end: 39, startTag: ..., endTag: ... }\nconsole.log(jsdom.nodeLocation(textNode)); // { start: 3, end: 13 }\nconsole.log(jsdom.nodeLocation(imgEl));    // { start: 13, end: 32 }\n```\n\nThis returns the [parse5 location info](https://www.npmjs.com/package/parse5#options-locationinfo) for the node.\n\n#### Overriding `window.top`\n\nThe `top` property on `window` is marked `[Unforgeable]` in the spec, meaning it is a non-configurable own property and thus cannot be overridden or shadowed by normal code running inside the jsdom window, even using `Object.defineProperty`. However, if you're acting from outside the window, e.g. in some test framework that creates jsdom instances, you can override it using the special `jsdom.reconfigureWindow` function:\n\n```js\njsdom.reconfigureWindow(window, { top: myFakeTopForTesting });\n```\n\nIn the future we may expand `reconfigureWindow` to allow overriding other `[Unforgeable]` properties. Let us know if you need this capability.\n\n## What Standards Does jsdom Support, Exactly?\n\nOur mission is to get something very close to a headless browser, with emphasis more on the DOM/HTML side of things than the CSS side. As such, our primary goals are supporting [The DOM Standard](http://dom.spec.whatwg.org/) and [The HTML Standard](http://www.whatwg.org/specs/web-apps/current-work/multipage/). We only support some subset of these so far; in particular we have the subset covered by the outdated DOM 2 spec family down pretty well. We're slowly including more and more from the modern DOM and HTML specs, including some `Node` APIs, `querySelector(All)`, attribute semantics, the history and URL APIs, and the HTML parsing algorithm.\n\nWe also support some subset of the [CSSOM](http://dev.w3.org/csswg/cssom/), largely via [@chad3814](https://github.com/chad3814)'s excellent [cssstyle](https://www.npmjs.org/package/cssstyle) package. In general we want to make webpages run headlessly as best we can, and if there are other specs we should be incorporating, let us know.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/tmpvar/jsdom/issues"},"homepage":"https://github.com/tmpvar/jsdom#readme","_id":"jsdom@7.2.2","_shasum":"40b402770c2bda23469096bee91ab675e3b1fc6e","_resolved":"https://registry.npmjs.org/jsdom/-/jsdom-7.2.2.tgz","_from":"https://registry.npmjs.org/jsdom/-/jsdom-7.2.2.tgz"}