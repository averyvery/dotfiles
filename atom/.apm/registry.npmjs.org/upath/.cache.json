{"_id":"upath","_rev":"18-44e40cc571c3bf7008865bb62cce1e9e","name":"upath","description":"A proxy to `path`, replacing `\\` with `/` for all results & new methods to normalize & join keeping leading `./` and add, change, default, trim file extensions.","dist-tags":{"latest":"0.1.7"},"versions":{"0.1.0":{"name":"upath","description":"A proxy to `path`, replacing `\\` with `/` for all results & methods to add, change, default, trim file extensions.","version":"0.1.0","homepage":"http://github.com/anodynos/upath/","author":{"name":"Agelos Pikoulas","email":"agelos.pikoulas@gmail.com"},"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"keywords":["path","unix","windows","extension","file extension","replace extension","change extension","trim extension","add extension","default extension"],"repository":{"type":"git","url":"git://github.com/anodynos/upath"},"bugs":{"url":"http://github.com/anodynos/upath/issues","email":"agelos.pikoulas@gmail.com"},"main":"./build/code/upath.js","preferGlobal":false,"scripts":{"test":"grunt"},"directories":{"doc":"./doc","dist":"./build"},"engines":{"node":"0.10.x"},"dependencies":{"lodash":"*","underscore.string":"^2.3.0"},"devDependencies":{"chai":"^1.9.0","coffee-script":"^1.8.0","mocha":"^2.0.0","grunt":"0.4.x","grunt-contrib-clean":"0.4.x","grunt-contrib-concat":"0.1.x","grunt-shell":"~0.3.x","grunt-contrib-watch":"~0.5.x","uberscore":"0.0.16"},"gitHead":"75f8bb50dc920a4f68f4a930e7b0946d3a413f0c","_id":"upath@0.1.0","_shasum":"823665902b2c9b37a5efcfb79a9b53b91738aa9b","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"anodynos","email":"agelos.pikoulas@gmail.com"},"maintainers":[{"name":"anodynos","email":"agelos.pikoulas@gmail.com"}],"dist":{"shasum":"823665902b2c9b37a5efcfb79a9b53b91738aa9b","tarball":"https://registry.npmjs.org/upath/-/upath-0.1.0.tgz"}},"0.1.1":{"name":"upath","description":"A proxy to `path`, replacing `\\` with `/` for all results & methods to add, change, default, trim file extensions.","version":"0.1.1","homepage":"http://github.com/anodynos/upath/","author":{"name":"Agelos Pikoulas","email":"agelos.pikoulas@gmail.com"},"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"keywords":["path","unix","windows","extension","file extension","replace extension","change extension","trim extension","add extension","default extension"],"repository":{"type":"git","url":"git://github.com/anodynos/upath"},"bugs":{"url":"http://github.com/anodynos/upath/issues","email":"agelos.pikoulas@gmail.com"},"main":"./build/code/upath.js","preferGlobal":false,"scripts":{"test":"grunt"},"directories":{"doc":"./doc","dist":"./build"},"engines":{"node":"0.10.x"},"dependencies":{"lodash":"*","underscore.string":"^2.3.0"},"devDependencies":{"chai":"^1.9.0","coffee-script":"^1.8.0","mocha":"^2.0.0","grunt":"0.4.x","grunt-contrib-clean":"0.4.x","grunt-contrib-concat":"0.1.x","grunt-shell":"~0.3.x","grunt-contrib-watch":"~0.5.x","uberscore":"0.0.16"},"gitHead":"a85237754056be321492164043485e7cf56a529a","_id":"upath@0.1.1","_shasum":"203a77784555e133c5bde9c8698693defaf3e9e7","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"anodynos","email":"agelos.pikoulas@gmail.com"},"maintainers":[{"name":"anodynos","email":"agelos.pikoulas@gmail.com"}],"dist":{"shasum":"203a77784555e133c5bde9c8698693defaf3e9e7","tarball":"https://registry.npmjs.org/upath/-/upath-0.1.1.tgz"}},"0.1.2":{"name":"upath","description":"A proxy to `path`, replacing `\\` with `/` for all results & methods to add, change, default, trim file extensions.","version":"0.1.2","homepage":"http://github.com/anodynos/upath/","author":{"name":"Agelos Pikoulas","email":"agelos.pikoulas@gmail.com"},"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"keywords":["path","unix","windows","extension","file extension","replace extension","change extension","trim extension","add extension","default extension"],"repository":{"type":"git","url":"git://github.com/anodynos/upath"},"bugs":{"url":"http://github.com/anodynos/upath/issues","email":"agelos.pikoulas@gmail.com"},"main":"./build/code/upath.js","preferGlobal":false,"scripts":{"test":"grunt"},"directories":{"doc":"./doc","dist":"./build"},"engines":{"node":"0.10.x"},"dependencies":{"lodash":"*","underscore.string":"^2.3.0"},"devDependencies":{"chai":"^1.9.0","coffee-script":"^1.8.0","mocha":"^2.0.0","grunt":"0.4.x","grunt-contrib-clean":"0.4.x","grunt-contrib-concat":"0.1.x","grunt-shell":"~0.3.x","grunt-contrib-watch":"~0.5.x","uberscore":"0.0.16"},"gitHead":"4cc6ced23237872d66a38087c28d740d3b6d98b3","_id":"upath@0.1.2","_shasum":"2306202c6b65cfa5d150b1b76388e81427a4f221","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"anodynos","email":"agelos.pikoulas@gmail.com"},"maintainers":[{"name":"anodynos","email":"agelos.pikoulas@gmail.com"}],"dist":{"shasum":"2306202c6b65cfa5d150b1b76388e81427a4f221","tarball":"https://registry.npmjs.org/upath/-/upath-0.1.2.tgz"}},"0.1.3":{"name":"upath","description":"A proxy to `path`, replacing `\\` with `/` for all results & methods to add, change, default, trim file extensions.","version":"0.1.3","homepage":"http://github.com/anodynos/upath/","author":{"name":"Agelos Pikoulas","email":"agelos.pikoulas@gmail.com"},"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"keywords":["path","unix","windows","extension","file extension","replace extension","change extension","trim extension","add extension","default extension"],"repository":{"type":"git","url":"git://github.com/anodynos/upath"},"bugs":{"url":"http://github.com/anodynos/upath/issues","email":"agelos.pikoulas@gmail.com"},"main":"./build/code/upath.js","preferGlobal":false,"scripts":{"test":"grunt"},"directories":{"doc":"./doc","dist":"./build"},"engines":{"node":"0.10.x"},"dependencies":{"lodash":"*","underscore.string":"^2.3.0"},"devDependencies":{"chai":"^1.9.0","coffee-script":"^1.8.0","mocha":"^2.0.0","grunt":"0.4.x","grunt-contrib-clean":"0.4.x","grunt-contrib-concat":"0.1.x","grunt-shell":"~0.3.x","grunt-contrib-watch":"~0.5.x","uberscore":"0.0.16"},"gitHead":"4e6006015baa7f00ecf7c64868fe82728422819a","_id":"upath@0.1.3","_shasum":"7b195b998f469dd1a021fd1c48fb6046dd9064dc","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"anodynos","email":"agelos.pikoulas@gmail.com"},"maintainers":[{"name":"anodynos","email":"agelos.pikoulas@gmail.com"}],"dist":{"shasum":"7b195b998f469dd1a021fd1c48fb6046dd9064dc","tarball":"https://registry.npmjs.org/upath/-/upath-0.1.3.tgz"}},"0.1.4":{"name":"upath","description":"A proxy to `path`, replacing `\\` with `/` for all results & methods to add, change, default, trim file extensions.","version":"0.1.4","homepage":"http://github.com/anodynos/upath/","author":{"name":"Agelos Pikoulas","email":"agelos.pikoulas@gmail.com"},"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"keywords":["path","unix","windows","extension","file extension","replace extension","change extension","trim extension","add extension","default extension"],"repository":{"type":"git","url":"git://github.com/anodynos/upath"},"bugs":{"url":"http://github.com/anodynos/upath/issues","email":"agelos.pikoulas@gmail.com"},"main":"./build/code/upath.js","preferGlobal":false,"scripts":{"test":"grunt"},"directories":{"doc":"./doc","dist":"./build"},"engines":{"node":"0.10.x"},"dependencies":{"lodash":"*","underscore.string":"^2.3.0"},"devDependencies":{"chai":"^1.9.0","coffee-script":"^1.8.0","mocha":"^2.0.0","grunt":"0.4.x","grunt-contrib-clean":"0.4.x","grunt-contrib-concat":"0.1.x","grunt-shell":"~0.3.x","grunt-contrib-watch":"~0.5.x","uberscore":"0.0.16"},"gitHead":"c0f7cdd53721872c88b3101dfacac3d735c1079f","_id":"upath@0.1.4","_shasum":"7008becb374e3b75063235848e4bacd6d3c4d9b3","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"anodynos","email":"agelos.pikoulas@gmail.com"},"maintainers":[{"name":"anodynos","email":"agelos.pikoulas@gmail.com"}],"dist":{"shasum":"7008becb374e3b75063235848e4bacd6d3c4d9b3","tarball":"https://registry.npmjs.org/upath/-/upath-0.1.4.tgz"}},"0.1.5":{"name":"upath","description":"A proxy to `path`, replacing `\\` with `/` for all results & methods to add, change, default, trim file extensions.","version":"0.1.5","homepage":"http://github.com/anodynos/upath/","author":{"name":"Agelos Pikoulas","email":"agelos.pikoulas@gmail.com"},"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"keywords":["path","unix","windows","extension","file extension","replace extension","change extension","trim extension","add extension","default extension"],"repository":{"type":"git","url":"git://github.com/anodynos/upath"},"bugs":{"url":"http://github.com/anodynos/upath/issues","email":"agelos.pikoulas@gmail.com"},"main":"./build/code/upath.js","preferGlobal":false,"scripts":{"test":"grunt"},"directories":{"doc":"./doc","dist":"./build"},"engines":{"node":"0.10.x"},"dependencies":{"lodash":"*","underscore.string":"^2.3.0"},"devDependencies":{"chai":"^1.9.0","mocha":"^2.0.0","grunt":"0.4.5","grunt-contrib-watch":"~0.5.x","grunt-urequire":"0.7.x","urequire":"0.7.x","uberscore":"0.0.16","urequire-ab-specrunner":"^0.1.10","urequire-rc-inject-version":"^0.1.2"},"gitHead":"0ba92813c422b6137b5cda10538a745fbf20227e","_id":"upath@0.1.5","_shasum":"04eb8709ce6ee7f5067ea112a2b60c6eba544485","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"anodynos","email":"agelos.pikoulas@gmail.com"},"maintainers":[{"name":"anodynos","email":"agelos.pikoulas@gmail.com"}],"dist":{"shasum":"04eb8709ce6ee7f5067ea112a2b60c6eba544485","tarball":"https://registry.npmjs.org/upath/-/upath-0.1.5.tgz"}},"0.1.6":{"name":"upath","description":"A proxy to `path`, replacing `\\` with `/` for all results & new methods to normalize & join keeping leading `./` and add, change, default, trim file extensions.","version":"0.1.6","homepage":"http://github.com/anodynos/upath/","author":{"name":"Angelos Pikoulas","email":"agelos.pikoulas@gmail.com"},"license":"MIT","keywords":["path","unix","windows","extension","file extension","replace extension","change extension","trim extension","add extension","default extension"],"repository":{"type":"git","url":"git://github.com/anodynos/upath.git"},"bugs":{"url":"http://github.com/anodynos/upath/issues","email":"agelos.pikoulas@gmail.com"},"main":"./build/code/upath.js","preferGlobal":false,"scripts":{"test":"grunt"},"directories":{"doc":"./doc","dist":"./build"},"engines":{"node":">=0.10.x <=0.12.x"},"dependencies":{"lodash":">=2.x","underscore.string":"2.3.x"},"devDependencies":{"chai":"1.9.x","mocha":"2.0.x","grunt":"0.4.5","grunt-contrib-watch":"0.5.x","grunt-urequire":"0.7.x","urequire":"0.7.0-beta.20","uberscore":"0.0.16","urequire-ab-specrunner":"0.2.x","urequire-rc-inject-version":"0.1.x"},"gitHead":"aebcd89d227675b473c870aa2dbd3302d98dfc36","_id":"upath@0.1.6","_shasum":"4809de430e55c5845b1cec6319f0fe6c877aa958","_from":".","_npmVersion":"2.11.3","_nodeVersion":"0.12.7","_npmUser":{"name":"anodynos","email":"agelos.pikoulas@gmail.com"},"maintainers":[{"name":"anodynos","email":"agelos.pikoulas@gmail.com"}],"dist":{"shasum":"4809de430e55c5845b1cec6319f0fe6c877aa958","tarball":"https://registry.npmjs.org/upath/-/upath-0.1.6.tgz"}},"0.1.7":{"name":"upath","description":"A proxy to `path`, replacing `\\` with `/` for all results & new methods to normalize & join keeping leading `./` and add, change, default, trim file extensions.","version":"0.1.7","homepage":"http://github.com/anodynos/upath/","author":{"name":"Angelos Pikoulas","email":"agelos.pikoulas@gmail.com"},"license":"MIT","keywords":["path","unix","windows","extension","file extension","replace extension","change extension","trim extension","add extension","default extension"],"repository":{"type":"git","url":"git://github.com/anodynos/upath"},"bugs":{"url":"http://github.com/anodynos/upath/issues","email":"agelos.pikoulas@gmail.com"},"main":"./build/code/upath.js","preferGlobal":false,"scripts":{"test":"grunt"},"directories":{"doc":"./doc","dist":"./build"},"engines":{"node":">=0.10 <=5"},"typescript":{"definition":"upath.d.ts"},"dependencies":{"lodash":"3.x","underscore.string":"2.3.x"},"devDependencies":{"chai":"3.5.x","mocha":"2.4.x","grunt":"0.4.5","grunt-contrib-watch":"0.6.x","grunt-urequire":"0.7.x","urequire":"0.7.0-beta.25","uberscore":"0.0.16","urequire-ab-specrunner":"^0.2.2","urequire-rc-inject-version":"^0.1.6"},"gitHead":"512f6605511c66ca79600dc8c3594476705b2320","_id":"upath@0.1.7","_shasum":"7c5bbfe9a4e074ff0b83131ad0c13c2d8601383b","_from":".","_npmVersion":"2.14.12","_nodeVersion":"4.3.1","_npmUser":{"name":"anodynos","email":"agelos.pikoulas@gmail.com"},"maintainers":[{"name":"anodynos","email":"agelos.pikoulas@gmail.com"}],"dist":{"shasum":"7c5bbfe9a4e074ff0b83131ad0c13c2d8601383b","tarball":"https://registry.npmjs.org/upath/-/upath-0.1.7.tgz"},"_npmOperationalInternal":{"host":"packages-5-east.internal.npmjs.com","tmp":"tmp/upath-0.1.7.tgz_1456101854015_0.8668476182501763"}}},"readme":"# upath v0.1.7\n\n[![Build Status](https://travis-ci.org/anodynos/upath.svg?branch=master)](https://travis-ci.org/anodynos/upath)\n[![Up to date Status](https://david-dm.org/anodynos/upath.png)](https://david-dm.org/anodynos/upath)\n\nA drop-in replacement / proxy to nodejs's `path` that:\n\n  * Replaces the windows `\\` with the unix `/` in all string params & results. This has significant positives - see below.\n\n  * Adds **filename extensions** functions `addExt`, `trimExt`, `removeExt`, `changeExt`, and `defaultExt`.\n\n  * Add a `normalizeSafe` function to preserve any meaningful leading `./` & a `normalizeTrim` which additionally trims any useless ending `/`.\n\n  * Plus a helper `toUnix` that simply converts `\\` to `/` and consolidates duplicates.\n\n**Useful note: these docs are actually auto generated from [specs](https://github.com/anodynos/upath/blob/master/source/spec/upath-spec.coffee), running on Linux.**\n\n## Why ?\n\nNormal `path` doesn't convert paths to a unified format (ie `/`) before calculating paths (`normalize`, `join`), which can lead to numerous problems.\nAlso path joining, normalization etc on the two formats is not consistent, depending on where it runs - last checked with nodejs 0.10.32 running on Linux & Windows x64.\nRunning on Windows `path` yields different results.\n\nIn general, if you code your paths logic while developing on Unix/Mac and it runs on Windows, you may run into problems when using `path`.\n\nNote that using **Unix `/` on Windows** works perfectly inside nodejs (and other languages), so there's no reason to stick to the legacy.\n\n##### Examples / specs\n        \n\nCheck out the different (improved) behavior to vanilla `path`:\n\n    `upath.normalize(path)`        --returns-->\n\n          ✓ `'c:/windows/nodejs/path'`          --->     `'c:/windows/nodejs/path'`  // equal to `path.normalize()`\n          ✓ `'c:/windows/../nodejs/path'`       --->             `'c:/nodejs/path'`  // equal to `path.normalize()`\n          ✓ `'c:\\\\windows\\\\nodejs\\\\path'`       --->     `'c:/windows/nodejs/path'`  // `path.normalize()` gives `'c:\\windows\\nodejs\\path'`\n          ✓ `'c:\\\\windows\\\\..\\\\nodejs\\\\path'`   --->             `'c:/nodejs/path'`  // `path.normalize()` gives `'c:\\windows\\..\\nodejs\\path'`\n          ✓ `'//windows\\\\unix/mixed'`           --->        `'/windows/unix/mixed'`  // `path.normalize()` gives `'/windows\\unix/mixed'`\n          ✓ `'\\\\windows//unix/mixed'`           --->        `'/windows/unix/mixed'`  // `path.normalize()` gives `'\\windows/unix/mixed'`\n          ✓ `'////\\\\windows\\\\..\\\\unix/mixed/'`  --->               `'/unix/mixed/'`  // `path.normalize()` gives `'/\\windows\\..\\unix/mixed/'`\n        \n\nJoining paths can also be a problem:\n\n    `upath.join(paths...)`        --returns-->\n\n          ✓ `'some/nodejs/deep', '../path'`      --->      `'some/nodejs/path'`  // equal to `path.join()`\n          ✓ `'some/nodejs\\\\windows', '../path'`  --->      `'some/nodejs/path'`  // `path.join()` gives `'some/path'`\n          ✓ `'some\\\\windows\\\\only', '..\\\\path'`  --->     `'some/windows/path'`  // `path.join()` gives `'some\\windows\\only/..\\path'`\n    \n\n## Added functions\n      \n\n#### `upath.toUnix(path)`\n\nJust converts all `` to `/` and consolidates duplicates, without performing any normalization.\n\n##### Examples / specs\n\n    `upath.toUnix(path)`        --returns-->\n\n        ✓ `'.//windows\\//unix//mixed////'`     --->        `'./windows/unix/mixed/'`\n        ✓ `'..///windows\\..\\\\unix/mixed'`      --->     `'../windows/../unix/mixed'`\n      \n\n#### `upath.normalizeSafe(path)`\n\nExactly like `path.normalize(path)`, but it keeps the first meaningful `./`.\n\nNote that the unix `/` is returned everywhere, so windows `\\` is always converted to unix `/`.\n\n##### Examples / specs & how it differs from vanilla `path`\n\n    `upath.normalizeSafe(path)`        --returns-->\n\n        ✓ `''`                              --->                         `'.'`  // equal to `path.normalize()`\n        ✓ `'.'`                             --->                         `'.'`  // equal to `path.normalize()`\n        ✓ `'./'`                            --->                        `'./'`  // equal to `path.normalize()`\n        ✓ `'.//'`                           --->                        `'./'`  // equal to `path.normalize()`\n        ✓ `'.\\\\'`                           --->                        `'./'`  // `path.normalize()` gives `'.\\'`\n        ✓ `'.\\\\//'`                         --->                        `'./'`  // `path.normalize()` gives `'.\\/'`\n        ✓ `'./..'`                          --->                        `'..'`  // equal to `path.normalize()`\n        ✓ `'.//..'`                         --->                        `'..'`  // equal to `path.normalize()`\n        ✓ `'./../'`                         --->                       `'../'`  // equal to `path.normalize()`\n        ✓ `'.\\\\..\\\\'`                       --->                       `'../'`  // `path.normalize()` gives `'.\\..\\'`\n        ✓ `'./../dep'`                      --->                    `'../dep'`  // equal to `path.normalize()`\n        ✓ `'../dep'`                        --->                    `'../dep'`  // equal to `path.normalize()`\n        ✓ `'../path/dep'`                   --->               `'../path/dep'`  // equal to `path.normalize()`\n        ✓ `'../path/../dep'`                --->                    `'../dep'`  // equal to `path.normalize()`\n        ✓ `'dep'`                           --->                       `'dep'`  // equal to `path.normalize()`\n        ✓ `'path//dep'`                     --->                  `'path/dep'`  // equal to `path.normalize()`\n        ✓ `'./dep'`                         --->                     `'./dep'`  // `path.normalize()` gives `'dep'`\n        ✓ `'./path/dep'`                    --->                `'./path/dep'`  // `path.normalize()` gives `'path/dep'`\n        ✓ `'./path/../dep'`                 --->                     `'./dep'`  // `path.normalize()` gives `'dep'`\n        ✓ `'.//windows\\\\unix/mixed/'`       --->     `'./windows/unix/mixed/'`  // `path.normalize()` gives `'windows\\unix/mixed/'`\n        ✓ `'..//windows\\\\unix/mixed'`       --->     `'../windows/unix/mixed'`  // `path.normalize()` gives `'../windows\\unix/mixed'`\n        ✓ `'windows\\\\unix/mixed/'`          --->       `'windows/unix/mixed/'`  // `path.normalize()` gives `'windows\\unix/mixed/'`\n        ✓ `'..//windows\\\\..\\\\unix/mixed'`   --->             `'../unix/mixed'`  // `path.normalize()` gives `'../windows\\..\\unix/mixed'`\n      \n\n#### `upath.normalizeTrim(path)`\n\nExactly like `path.normalizeSafe(path)`, but it trims any useless ending `/`.\n\n##### Examples / specs\n\n    `upath.normalizeTrim(path)`        --returns-->\n\n        ✓ `'./'`                         --->                        `'.'`  // `upath.normalizeSafe()` gives `'./'`\n        ✓ `'./../'`                      --->                       `'..'`  // `upath.normalizeSafe()` gives `'../'`\n        ✓ `'./../dep/'`                  --->                   `'../dep'`  // `upath.normalizeSafe()` gives `'../dep/'`\n        ✓ `'path//dep\\\\'`                --->                 `'path/dep'`  // `upath.normalizeSafe()` gives `'path/dep/'`\n        ✓ `'.//windows\\\\unix/mixed/'`    --->     `'./windows/unix/mixed'`  // `upath.normalizeSafe()` gives `'./windows/unix/mixed/'`\n      \n\n#### `upath.joinSafe([path1][, path2][, ...])`\n\nExactly like `path.join()`, but it keeps the first meaningful `./`.\n\nNote that the unix `/` is returned everywhere, so windows `\\` is always converted to unix `/`.\n\n##### Examples / specs & how it differs from vanilla `path`\n\n    `upath.joinSafe(path)`        --returns-->\n\n        ✓ `'some/nodejs/deep', '../path'`               --->          `'some/nodejs/path'`  // equal to `path.join()`\n        ✓ `'./some/local/unix/', '../path'`             --->         `'./some/local/path'`  // `path.join()` gives `'some/local/path'`\n        ✓ `'./some\\\\current\\\\mixed', '..\\\\path'`        --->       `'./some/current/path'`  // `path.join()` gives `'some\\current\\mixed/..\\path'`\n        ✓ `'../some/relative/destination', '..\\\\path'`  --->     `'../some/relative/path'`  // `path.join()` gives `'../some/relative/destination/..\\path'`\n    \n\n## Added functions for *filename extension* manipulation.\n\n**Happy notes:**\n\n  In all functions you can:\n\n  * use both `.ext` & `ext` - the dot `.` on the extension is always adjusted correctly.\n\n  * omit the `ext` param (pass null/undefined/empty string) and the common sense thing will happen.\n\n  * ignore specific extensions from being considered as valid ones (eg `.min`, `.dev` `.aLongExtIsNotAnExt` etc), hence no trimming or replacement takes place on them.\n\n       \n\n#### `upath.addExt(filename, [ext])`\n\nAdds `.ext` to `filename`, but only if it doesn't already have the exact extension.\n\n##### Examples / specs\n\n    `upath.addExt(filename, 'js')`     --returns-->\n\n        ✓ `'myfile/addExt'`          --->          `'myfile/addExt.js'`\n        ✓ `'myfile/addExt.txt'`      --->      `'myfile/addExt.txt.js'`\n        ✓ `'myfile/addExt.js'`       --->          `'myfile/addExt.js'`\n        ✓ `'myfile/addExt.min.'`     --->     `'myfile/addExt.min..js'`\n        \n\nIt adds nothing if no `ext` param is passed.\n\n    `upath.addExt(filename)`           --returns-->\n\n          ✓ `'myfile/addExt'`          --->             `'myfile/addExt'`\n          ✓ `'myfile/addExt.txt'`      --->         `'myfile/addExt.txt'`\n          ✓ `'myfile/addExt.js'`       --->          `'myfile/addExt.js'`\n          ✓ `'myfile/addExt.min.'`     --->        `'myfile/addExt.min.'`\n      \n\n#### `upath.trimExt(filename, [ignoreExts], [maxSize=7])`\n\nTrims a filename's extension.\n\n  * Extensions are considered to be up to `maxSize` chars long, counting the dot (defaults to 7).\n\n  * An `Array` of `ignoreExts` (eg `['.min']`) prevents these from being considered as extension, thus are not trimmed.\n\n##### Examples / specs\n\n    `upath.trimExt(filename)`          --returns-->\n\n        ✓ `'my/trimedExt.txt'`            --->                `'my/trimedExt'`\n        ✓ `'my/trimedExt'`                --->                `'my/trimedExt'`\n        ✓ `'my/trimedExt.min'`            --->                `'my/trimedExt'`\n        ✓ `'my/trimedExt.min.js'`         --->            `'my/trimedExt.min'`\n        ✓ `'../my/trimedExt.longExt'`     --->     `'../my/trimedExt.longExt'`\n        \n\nIt is ignoring `.min` & `.dev` as extensions, and considers exts with up to 8 chars.\n\n    `upath.removeExt(filename, ['min', '.dev'], 8)`          --returns-->\n\n          ✓ `'my/trimedExt.txt'`             --->                 `'my/trimedExt'`\n          ✓ `'my/trimedExt.min'`             --->             `'my/trimedExt.min'`\n          ✓ `'my/trimedExt.dev'`             --->             `'my/trimedExt.dev'`\n          ✓ `'../my/trimedExt.longExt'`      --->              `'../my/trimedExt'`\n          ✓ `'../my/trimedExt.longRExt'`     --->     `'../my/trimedExt.longRExt'`\n      \n\n#### `upath.removeExt(filename, ext)`\n\nRemoves the specific `ext` extension from filename, if it has it. Otherwise it leaves it as is.\nAs in all upath functions, it be `.ext` or `ext`.\n\n##### Examples / specs\n\n    `upath.removeExt(filename, '.js')`          --returns-->\n\n        ✓ `'removedExt.js'`         --->         `'removedExt'`\n        ✓ `'removedExt.txt.js'`     --->     `'removedExt.txt'`\n        ✓ `'notRemoved.txt'`        --->     `'notRemoved.txt'`\n      \n\n#### `upath.changeExt(filename, [ext], [ignoreExts], [maxSize=7])`\n\nChanges a filename's extension to `ext`. If it has no (valid) extension, it adds it.\n\n  * Valid extensions are considered to be up to `maxSize` chars long, counting the dot (defaults to 7).\n\n  * An `Array` of `ignoreExts` (eg `['.min']`) prevents these from being considered as extension, thus are not changed - the new extension is added instead.\n\n##### Examples / specs\n\n    `upath.changeExt(filename, '.js')`  --returns-->\n\n        ✓ `'my/module.min'`           --->               `'my/module.js'`\n        ✓ `'my/module.coffee'`        --->               `'my/module.js'`\n        ✓ `'my/module'`               --->               `'my/module.js'`\n        ✓ `'file/withDot.'`           --->            `'file/withDot.js'`\n        ✓ `'file/change.longExt'`     --->     `'file/change.longExt.js'`\n        \n\nIf no `ext` param is given, it trims the current extension (if any).\n\n    `upath.changeExt(filename)`        --returns-->\n\n          ✓ `'my/module.min'`           --->                  `'my/module'`\n          ✓ `'my/module.coffee'`        --->                  `'my/module'`\n          ✓ `'my/module'`               --->                  `'my/module'`\n          ✓ `'file/withDot.'`           --->               `'file/withDot'`\n          ✓ `'file/change.longExt'`     --->        `'file/change.longExt'`\n        \n\nIt is ignoring `.min` & `.dev` as extensions, and considers exts with up to 8 chars.\n\n    `upath.changeExt(filename, 'js', ['min', '.dev'], 8)`        --returns-->\n\n          ✓ `'my/module.coffee'`         --->                `'my/module.js'`\n          ✓ `'file/notValidExt.min'`     --->     `'file/notValidExt.min.js'`\n          ✓ `'file/notValidExt.dev'`     --->     `'file/notValidExt.dev.js'`\n          ✓ `'file/change.longExt'`      --->              `'file/change.js'`\n          ✓ `'file/change.longRExt'`     --->     `'file/change.longRExt.js'`\n      \n\n#### `upath.defaultExt(filename, [ext], [ignoreExts], [maxSize=7])`\n\nAdds `.ext` to `filename`, only if it doesn't already have _any_ *old* extension.\n\n  * (Old) extensions are considered to be up to `maxSize` chars long, counting the dot (defaults to 7).\n\n  * An `Array` of `ignoreExts` (eg `['.min']`) will force adding default `.ext` even if one of these is present.\n\n##### Examples / specs\n\n    `upath.defaultExt(filename, 'js')`   --returns-->\n\n        ✓ `'fileWith/defaultExt'`             --->             `'fileWith/defaultExt.js'`\n        ✓ `'fileWith/defaultExt.js'`          --->             `'fileWith/defaultExt.js'`\n        ✓ `'fileWith/defaultExt.min'`         --->            `'fileWith/defaultExt.min'`\n        ✓ `'fileWith/defaultExt.longExt'`     --->     `'fileWith/defaultExt.longExt.js'`\n        \n\nIf no `ext` param is passed, it leaves filename intact.\n\n    `upath.defaultExt(filename)`       --returns-->\n\n          ✓ `'fileWith/defaultExt'`             --->                `'fileWith/defaultExt'`\n          ✓ `'fileWith/defaultExt.js'`          --->             `'fileWith/defaultExt.js'`\n          ✓ `'fileWith/defaultExt.min'`         --->            `'fileWith/defaultExt.min'`\n          ✓ `'fileWith/defaultExt.longExt'`     --->        `'fileWith/defaultExt.longExt'`\n        \n\nIt is ignoring `.min` & `.dev` as extensions, and considers exts with up to 8 chars.\n\n    `upath.defaultExt(filename, 'js', ['min', '.dev'], 8)` --returns-->\n\n          ✓ `'fileWith/defaultExt'`              --->              `'fileWith/defaultExt.js'`\n          ✓ `'fileWith/defaultExt.min'`          --->          `'fileWith/defaultExt.min.js'`\n          ✓ `'fileWith/defaultExt.dev'`          --->          `'fileWith/defaultExt.dev.js'`\n          ✓ `'fileWith/defaultExt.longExt'`      --->         `'fileWith/defaultExt.longExt'`\n          ✓ `'fileWith/defaultExt.longRext'`     --->     `'fileWith/defaultExt.longRext.js'`\n\n  \nCopyright(c) 2014-2016 Angelos Pikoulas (agelos.pikoulas@gmail.com)\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n \n","maintainers":[{"name":"anodynos","email":"agelos.pikoulas@gmail.com"}],"time":{"modified":"2016-02-22T00:44:17.009Z","created":"2014-10-29T02:29:05.388Z","0.1.0":"2014-10-29T02:29:05.388Z","0.1.1":"2014-10-29T03:16:42.083Z","0.1.2":"2014-10-29T20:35:51.915Z","0.1.3":"2014-10-29T23:38:16.925Z","0.1.4":"2014-11-08T18:39:33.427Z","0.1.5":"2014-11-17T22:52:30.607Z","0.1.6":"2015-08-20T22:41:00.942Z","0.1.7":"2016-02-22T00:44:17.009Z"},"homepage":"http://github.com/anodynos/upath/","keywords":["path","unix","windows","extension","file extension","replace extension","change extension","trim extension","add extension","default extension"],"repository":{"type":"git","url":"git://github.com/anodynos/upath"},"author":{"name":"Angelos Pikoulas","email":"agelos.pikoulas@gmail.com"},"bugs":{"url":"http://github.com/anodynos/upath/issues","email":"agelos.pikoulas@gmail.com"},"readmeFilename":"readme.md","users":{"thoroc":true,"n03024735":true},"license":"MIT","_attachments":{},"_etag":"\"7ODLSL3JGEQXCMPLTC5PP5NUT\""}