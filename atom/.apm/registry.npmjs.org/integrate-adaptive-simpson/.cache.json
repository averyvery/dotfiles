{"_id":"integrate-adaptive-simpson","_rev":"14-0dffcc8f84d3af3389d6cfae4169a57a","name":"integrate-adaptive-simpson","description":"Integrate a system of ODEs using the Second Order Runge-Kutta (Midpoint) method","dist-tags":{"latest":"1.1.1"},"versions":{"1.0.0":{"name":"integrate-adaptive-simpson","version":"1.0.0","description":"Integrate a system of ODEs using the Second Order Runge-Kutta (Midpoint) method","main":"lib/index.js","scripts":{"test":"mocha"},"repository":{"type":"git","url":"git://github.com/scijs/integrate-adaptive-simpson.git"},"keywords":["scijs","integral","definite-integral","integration","calculus","adaptive"],"author":{"name":"Ricky Reusser"},"license":"MIT","devDependencies":{"chai":"^3.0.0","gulp-filter":"^2.0.2","gulp-latex":"^1.0.1","gulp-markdown-equations":"^1.2.0","gulp-pdftocairo":"^0.2.0","gulp-tap":"^0.1.3","integrate-simpson":"^1.0.3","mocha":"^2.2.5"},"dependencies":{"compute-array-constructors":"^1.0.0","compute-dtype":"^1.0.0"},"gitHead":"a1734ac2e0c0514fbd80231fd2312d23c6e8bf85","bugs":{"url":"https://github.com/scijs/integrate-adaptive-simpson/issues"},"homepage":"https://github.com/scijs/integrate-adaptive-simpson#readme","_id":"integrate-adaptive-simpson@1.0.0","_shasum":"43713b27d4e233e43c0441a390318f0bb76e65b3","_from":".","_npmVersion":"2.11.3","_nodeVersion":"0.12.7","_npmUser":{"name":"rreusser","email":"rsreusser@gmail.com"},"maintainers":[{"name":"rreusser","email":"rsreusser@gmail.com"}],"dist":{"shasum":"43713b27d4e233e43c0441a390318f0bb76e65b3","tarball":"https://registry.npmjs.org/integrate-adaptive-simpson/-/integrate-adaptive-simpson-1.0.0.tgz"},"directories":{}},"1.0.1":{"name":"integrate-adaptive-simpson","version":"1.0.1","description":"Integrate a system of ODEs using the Second Order Runge-Kutta (Midpoint) method","main":"lib/index.js","scripts":{"test":"mocha"},"repository":{"type":"git","url":"git://github.com/scijs/integrate-adaptive-simpson.git"},"keywords":["scijs","integral","definite-integral","integration","calculus","adaptive"],"author":{"name":"Ricky Reusser"},"license":"MIT","devDependencies":{"chai":"^3.0.0","gulp-filter":"^2.0.2","gulp-latex":"^1.0.1","gulp-markdown-equations":"^1.2.0","gulp-pdftocairo":"^0.2.0","gulp-tap":"^0.1.3","integrate-simpson":"^1.0.3","mocha":"^2.2.5"},"dependencies":{"compute-array-constructors":"^1.0.0","compute-dtype":"^1.0.0"},"gitHead":"b00df0c3e3ac3cdbe2c3c3bfdf20f4ea5715d2e3","bugs":{"url":"https://github.com/scijs/integrate-adaptive-simpson/issues"},"homepage":"https://github.com/scijs/integrate-adaptive-simpson#readme","_id":"integrate-adaptive-simpson@1.0.1","_shasum":"0929870011defd97b3e19451bc8382cf5cbd2db6","_from":".","_npmVersion":"2.11.3","_nodeVersion":"0.12.7","_npmUser":{"name":"rreusser","email":"rsreusser@gmail.com"},"maintainers":[{"name":"rreusser","email":"rsreusser@gmail.com"}],"dist":{"shasum":"0929870011defd97b3e19451bc8382cf5cbd2db6","tarball":"https://registry.npmjs.org/integrate-adaptive-simpson/-/integrate-adaptive-simpson-1.0.1.tgz"},"directories":{}},"1.0.2":{"name":"integrate-adaptive-simpson","version":"1.0.2","description":"Integrate a system of ODEs using the Second Order Runge-Kutta (Midpoint) method","main":"lib/index.js","scripts":{"test":"mocha"},"repository":{"type":"git","url":"git://github.com/scijs/integrate-adaptive-simpson.git"},"keywords":["scijs","integral","definite-integral","integration","calculus","adaptive"],"author":{"name":"Ricky Reusser"},"license":"MIT","devDependencies":{"chai":"^3.0.0","gulp-filter":"^2.0.2","gulp-latex":"^1.0.1","gulp-markdown-equations":"^1.2.0","gulp-pdftocairo":"^0.2.0","gulp-tap":"^0.1.3","integrate-simpson":"^1.0.3","mocha":"^2.2.5"},"dependencies":{"compute-array-constructors":"^1.0.0","compute-dtype":"^1.0.0"},"gitHead":"986f9178bf9068f896181993c38b03430452ea47","bugs":{"url":"https://github.com/scijs/integrate-adaptive-simpson/issues"},"homepage":"https://github.com/scijs/integrate-adaptive-simpson#readme","_id":"integrate-adaptive-simpson@1.0.2","_shasum":"4d5d0a4db4a9e47b2580802225ac922dff7f72f0","_from":".","_npmVersion":"2.11.3","_nodeVersion":"0.12.7","_npmUser":{"name":"rreusser","email":"rsreusser@gmail.com"},"maintainers":[{"name":"rreusser","email":"rsreusser@gmail.com"}],"dist":{"shasum":"4d5d0a4db4a9e47b2580802225ac922dff7f72f0","tarball":"https://registry.npmjs.org/integrate-adaptive-simpson/-/integrate-adaptive-simpson-1.0.2.tgz"},"directories":{}},"1.0.3":{"name":"integrate-adaptive-simpson","version":"1.0.3","description":"Integrate a system of ODEs using the Second Order Runge-Kutta (Midpoint) method","main":"lib/index.js","scripts":{"test":"mocha"},"repository":{"type":"git","url":"git://github.com/scijs/integrate-adaptive-simpson.git"},"keywords":["scijs","integral","definite-integral","integration","calculus","adaptive","romberg"],"author":{"name":"Ricky Reusser"},"license":"MIT","devDependencies":{"chai":"^3.0.0","gulp-filter":"^2.0.2","gulp-latex":"^1.0.1","gulp-markdown-equations":"^1.2.0","gulp-pdftocairo":"^0.2.0","gulp-tap":"^0.1.3","integrate-simpson":"^1.0.3","mocha":"^2.2.5"},"dependencies":{"compute-array-constructors":"^1.0.0","compute-dtype":"^1.0.0"},"gitHead":"e4ede146f02629220f48ce9a6479e6ebaa4e9832","bugs":{"url":"https://github.com/scijs/integrate-adaptive-simpson/issues"},"homepage":"https://github.com/scijs/integrate-adaptive-simpson#readme","_id":"integrate-adaptive-simpson@1.0.3","_shasum":"25e1656f4eecba74254b795e208f7101f30455cb","_from":".","_npmVersion":"2.11.3","_nodeVersion":"0.12.7","_npmUser":{"name":"rreusser","email":"rsreusser@gmail.com"},"maintainers":[{"name":"rreusser","email":"rsreusser@gmail.com"}],"dist":{"shasum":"25e1656f4eecba74254b795e208f7101f30455cb","tarball":"https://registry.npmjs.org/integrate-adaptive-simpson/-/integrate-adaptive-simpson-1.0.3.tgz"},"directories":{}},"1.0.4":{"name":"integrate-adaptive-simpson","version":"1.0.4","description":"Integrate a system of ODEs using the Second Order Runge-Kutta (Midpoint) method","main":"index.js","scripts":{"test":"semistandard && mocha","lint":"semistandard"},"repository":{"type":"git","url":"git://github.com/scijs/integrate-adaptive-simpson.git"},"keywords":["scijs","integral","definite-integral","integration","calculus","adaptive","romberg"],"author":{"name":"Ricky Reusser"},"license":"MIT","devDependencies":{"chai":"^3.0.0","integrate-simpson":"^1.0.3","mocha":"^2.2.5","semistandard":"^7.0.5","sinon":"^1.17.3"},"dependencies":{"compute-array-constructors":"^1.0.0","compute-dtype":"^1.0.0"},"gitHead":"3b31f39d564dd993d64ce4cc9302279e69bb3496","bugs":{"url":"https://github.com/scijs/integrate-adaptive-simpson/issues"},"homepage":"https://github.com/scijs/integrate-adaptive-simpson#readme","_id":"integrate-adaptive-simpson@1.0.4","_shasum":"e25b21fc789f3dd39c410d10ad34cf83f0177a92","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.3","_npmUser":{"name":"rreusser","email":"rsreusser@gmail.com"},"dist":{"shasum":"e25b21fc789f3dd39c410d10ad34cf83f0177a92","tarball":"https://registry.npmjs.org/integrate-adaptive-simpson/-/integrate-adaptive-simpson-1.0.4.tgz"},"maintainers":[{"name":"jaspervdg","email":"th.v.d.gronde@hccnet.nl"},{"name":"mikolalysenko","email":"mikolalysenko@gmail.com"},{"name":"planeshifter","email":"pgb@andrew.cmu.edu"},{"name":"rreusser","email":"rsreusser@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/integrate-adaptive-simpson-1.0.4.tgz_1459710679243_0.4288693694397807"},"directories":{}},"1.0.5":{"name":"integrate-adaptive-simpson","version":"1.0.5","description":"Integrate a system of ODEs using the Second Order Runge-Kutta (Midpoint) method","main":"index.js","scripts":{"test":"semistandard && mocha","lint":"semistandard"},"repository":{"type":"git","url":"git://github.com/scijs/integrate-adaptive-simpson.git"},"keywords":["scijs","integral","definite-integral","integration","calculus","adaptive","romberg"],"author":{"name":"Ricky Reusser"},"license":"MIT","devDependencies":{"chai":"^3.0.0","integrate-simpson":"^1.0.3","mocha":"^2.2.5","semistandard":"^7.0.5","sinon":"^1.17.3"},"dependencies":{},"gitHead":"e34692ad19b3d0bffecbd57e22e78a21cdd1fccf","bugs":{"url":"https://github.com/scijs/integrate-adaptive-simpson/issues"},"homepage":"https://github.com/scijs/integrate-adaptive-simpson#readme","_id":"integrate-adaptive-simpson@1.0.5","_shasum":"6518b2c499485d2693c83a6377cb42ea70193ca3","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.3","_npmUser":{"name":"rreusser","email":"rsreusser@gmail.com"},"dist":{"shasum":"6518b2c499485d2693c83a6377cb42ea70193ca3","tarball":"https://registry.npmjs.org/integrate-adaptive-simpson/-/integrate-adaptive-simpson-1.0.5.tgz"},"maintainers":[{"name":"jaspervdg","email":"th.v.d.gronde@hccnet.nl"},{"name":"mikolalysenko","email":"mikolalysenko@gmail.com"},{"name":"planeshifter","email":"pgb@andrew.cmu.edu"},{"name":"rreusser","email":"rsreusser@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/integrate-adaptive-simpson-1.0.5.tgz_1459712745050_0.4565902373287827"},"directories":{}},"1.0.6":{"name":"integrate-adaptive-simpson","version":"1.0.6","description":"Integrate a system of ODEs using the Second Order Runge-Kutta (Midpoint) method","main":"index.js","scripts":{"test":"semistandard && mocha","lint":"semistandard"},"repository":{"type":"git","url":"git://github.com/scijs/integrate-adaptive-simpson.git"},"keywords":["scijs","integral","definite-integral","integration","calculus","adaptive","romberg"],"author":{"name":"Ricky Reusser"},"license":"MIT","devDependencies":{"chai":"^3.0.0","integrate-simpson":"^1.0.3","mocha":"^2.2.5","semistandard":"^7.0.5","sinon":"^1.17.3"},"dependencies":{},"gitHead":"77b8033b657fb32f8099a0ea2bd9f1c440c701f5","bugs":{"url":"https://github.com/scijs/integrate-adaptive-simpson/issues"},"homepage":"https://github.com/scijs/integrate-adaptive-simpson#readme","_id":"integrate-adaptive-simpson@1.0.6","_shasum":"70235716b527605ec1d76ae4a6217d0f43e5fec8","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.3","_npmUser":{"name":"rreusser","email":"rsreusser@gmail.com"},"dist":{"shasum":"70235716b527605ec1d76ae4a6217d0f43e5fec8","tarball":"https://registry.npmjs.org/integrate-adaptive-simpson/-/integrate-adaptive-simpson-1.0.6.tgz"},"maintainers":[{"name":"jaspervdg","email":"th.v.d.gronde@hccnet.nl"},{"name":"mikolalysenko","email":"mikolalysenko@gmail.com"},{"name":"planeshifter","email":"pgb@andrew.cmu.edu"},{"name":"rreusser","email":"rsreusser@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/integrate-adaptive-simpson-1.0.6.tgz_1459718888946_0.32422339520417154"},"directories":{}},"1.0.7":{"name":"integrate-adaptive-simpson","version":"1.0.7","description":"Integrate a system of ODEs using the Second Order Runge-Kutta (Midpoint) method","main":"index.js","scripts":{"test":"semistandard && mocha","lint":"semistandard"},"repository":{"type":"git","url":"git://github.com/scijs/integrate-adaptive-simpson.git"},"keywords":["scijs","integral","definite-integral","integration","calculus","adaptive","romberg"],"author":{"name":"Ricky Reusser"},"license":"MIT","devDependencies":{"chai":"^3.0.0","integrate-simpson":"^1.0.3","mocha":"^2.2.5","semistandard":"^7.0.5","sinon":"^1.17.3"},"dependencies":{},"gitHead":"72469328f15e8205eb7399122faf76535872fe89","bugs":{"url":"https://github.com/scijs/integrate-adaptive-simpson/issues"},"homepage":"https://github.com/scijs/integrate-adaptive-simpson#readme","_id":"integrate-adaptive-simpson@1.0.7","_shasum":"639d4e20afb3067ef9b07084d32adf38a1cfbd34","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.3","_npmUser":{"name":"rreusser","email":"rsreusser@gmail.com"},"dist":{"shasum":"639d4e20afb3067ef9b07084d32adf38a1cfbd34","tarball":"https://registry.npmjs.org/integrate-adaptive-simpson/-/integrate-adaptive-simpson-1.0.7.tgz"},"maintainers":[{"name":"jaspervdg","email":"th.v.d.gronde@hccnet.nl"},{"name":"mikolalysenko","email":"mikolalysenko@gmail.com"},{"name":"planeshifter","email":"pgb@andrew.cmu.edu"},{"name":"rreusser","email":"rsreusser@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/integrate-adaptive-simpson-1.0.7.tgz_1459779506239_0.8348816209472716"},"directories":{}},"1.1.0":{"name":"integrate-adaptive-simpson","version":"1.1.0","description":"Integrate a system of ODEs using the Second Order Runge-Kutta (Midpoint) method","main":"index.js","scripts":{"test":"semistandard && mocha","lint":"semistandard"},"repository":{"type":"git","url":"git://github.com/scijs/integrate-adaptive-simpson.git"},"keywords":["scijs","integral","definite-integral","integration","calculus","adaptive","romberg"],"author":{"name":"Ricky Reusser"},"license":"MIT","devDependencies":{"almost-equal":"^1.1.0","chai":"^3.0.0","integrate-simpson":"^1.0.3","mocha":"^2.2.5","semistandard":"^7.0.5","sinon":"^1.17.3"},"dependencies":{},"gitHead":"23f446337ad07258c876033a9e171d6845a95c0a","bugs":{"url":"https://github.com/scijs/integrate-adaptive-simpson/issues"},"homepage":"https://github.com/scijs/integrate-adaptive-simpson#readme","_id":"integrate-adaptive-simpson@1.1.0","_shasum":"a33c8c39e9ffddf04496ebfcad4f311e77e9a59b","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.3","_npmUser":{"name":"rreusser","email":"rsreusser@gmail.com"},"maintainers":[{"name":"jaspervdg","email":"th.v.d.gronde@hccnet.nl"},{"name":"mikolalysenko","email":"mikolalysenko@gmail.com"},{"name":"planeshifter","email":"pgb@andrew.cmu.edu"},{"name":"rreusser","email":"rsreusser@gmail.com"}],"dist":{"shasum":"a33c8c39e9ffddf04496ebfcad4f311e77e9a59b","tarball":"https://registry.npmjs.org/integrate-adaptive-simpson/-/integrate-adaptive-simpson-1.1.0.tgz"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/integrate-adaptive-simpson-1.1.0.tgz_1463959369185_0.4340865609701723"},"directories":{}},"1.1.1":{"name":"integrate-adaptive-simpson","version":"1.1.1","description":"Integrate a system of ODEs using the Second Order Runge-Kutta (Midpoint) method","main":"index.js","scripts":{"test":"semistandard && mocha","lint":"semistandard"},"repository":{"type":"git","url":"git://github.com/scijs/integrate-adaptive-simpson.git"},"keywords":["scijs","integral","definite-integral","integration","calculus","adaptive","romberg"],"author":{"name":"Ricky Reusser"},"license":"MIT","devDependencies":{"almost-equal":"^1.1.0","chai":"^3.0.0","integrate-simpson":"^1.0.3","mocha":"^2.2.5","semistandard":"^7.0.5","sinon":"^1.17.3"},"dependencies":{},"gitHead":"f6714165e0175c39a5e0e4d6dee907a367e87b19","bugs":{"url":"https://github.com/scijs/integrate-adaptive-simpson/issues"},"homepage":"https://github.com/scijs/integrate-adaptive-simpson#readme","_id":"integrate-adaptive-simpson@1.1.1","_shasum":"8161cbefb50e430d14fd15489575092bab1d2c69","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.3","_npmUser":{"name":"rreusser","email":"rsreusser@gmail.com"},"dist":{"shasum":"8161cbefb50e430d14fd15489575092bab1d2c69","tarball":"https://registry.npmjs.org/integrate-adaptive-simpson/-/integrate-adaptive-simpson-1.1.1.tgz"},"maintainers":[{"name":"jaspervdg","email":"th.v.d.gronde@hccnet.nl"},{"name":"mikolalysenko","email":"mikolalysenko@gmail.com"},{"name":"planeshifter","email":"pgb@andrew.cmu.edu"},{"name":"rreusser","email":"rsreusser@gmail.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/integrate-adaptive-simpson-1.1.1.tgz_1465173465811_0.349750860594213"},"directories":{}}},"readme":"# integrate-adaptive-simpson\n\n[![Build Status](https://travis-ci.org/scijs/integrate-adaptive-simpson.svg)](https://travis-ci.org/scijs/integrate-adaptive-simpson) [![npm version](https://badge.fury.io/js/integrate-adaptive-simpson.svg)](http://badge.fury.io/js/integrate-adaptive-simpson) [![Dependency Status](https://david-dm.org/scijs/integrate-adaptive-simpson.svg)](https://david-dm.org/scijs/integrate-adaptive-simpson) [![js-semistandard-style](https://img.shields.io/badge/code%20style-semistandard-brightgreen.svg?style=flat-square)](https://github.com/Flet/semistandard)\n\n> Compute a definite integral of one variable using [Simpson's Rule](https://en.wikipedia.org/wiki/Simpson%27s_rule) with adaptive quadrature\n\n## Introduction\n\nThis module computes the definite integral <p align=\"center\"><img alt=\"&bsol;int&lowbar;a&Hat;b f&lpar;x&rpar; &bsol;&comma; dx\" valign=\"middle\" src=\"images/int_ab-fx-dx-49d001614b.png\" width=\"99.5\" height=\"56.5\"></p> using [Romberg Integration](https://en.wikipedia.org/wiki/Romberg%27s_method) based on [Simpson's Rule](https://en.wikipedia.org/wiki/Simpson%27s_rule). That is, it uses [Richardson Extrapolation](https://en.wikipedia.org/wiki/Richardson_extrapolation) to estimate the error and recursively subdivide intervals until the error tolerance is met. The code is adapted from the pseudocode in [Romberg Integration and Adaptive Quadrature](http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf).\n\n## Install\n\n```bash\n$ npm install integrate-adaptive-simpson\n```\n\n## Example\n\nTo compute the definite integral <p align=\"center\"><img alt=\"&bsol;int&lowbar;&lcub;0&period;01&rcub;&Hat;&lcub;1&rcub; &bsol;frac&lcub;1&rcub;&lcub;x&rcub;&bsol;cos&bsol;left&lpar;&bsol;frac&lcub;1&rcub;&lcub;x&rcub;&bsol;right&rpar;&bsol;&comma;dx&comma;\" valign=\"middle\" src=\"images/int_0011-frac1xcosleftfrac1xrightdx-c5d6a6f216.png\" width=\"177\" height=\"56.5\"></p> execute:\n\n```javascript\nvar integrate = require('integrate-adaptive-simpson');\n\nfunction f (x) {\n  return Math.cos(1 / x) / x);\n}\n\nintiegrate(f, 0.01, 1, 1e-8);\n// => -0.3425527480294604\n```\n\nTo integrate a vector function, you may import the vectorized version. To compute a contour integral of, say, <img alt=\"1 &sol; z\" valign=\"middle\" src=\"images/1-z-32ebeece91.png\" width=\"34.5\" height=\"33\"> about <img alt=\"z&lowbar;0 &equals; 0\" valign=\"middle\" src=\"images/z_0-0-227c53dd15.png\" width=\"59\" height=\"31\">, that is, <p align=\"center\"><img alt=\"&bsol;oint &bsol;frac&lcub;dz&rcub;&lcub;z&rcub; &equals; 2&bsol;pi i&comma;\" valign=\"middle\" src=\"images/oint-fracdzz-2pi-i-3243136d9d.png\" width=\"114\" height=\"50.5\"></p>\n\n```javascript\nvar integrate = require('integrate-adaptive-simpson/vector');\n\nintegrate(function (f, theta) {\n  // z = unit circle:\n  var c = Math.cos(theta);\n  var s = Math.sin(theta);\n\n  // dz:\n  var dzr = -s;\n  var dzi = c;\n\n  // 1 / z at this point on the unit circle:\n  var fr = c / (c * c + s * s);\n  var fi = -s / (c * c + s * s);\n\n  // Multiply f(z) * dz:\n  f[0] = fr * dzr - fi * dzi;\n  f[1] = fr * dzi + fi * dzr;\n}, 0, Math.PI * 2);\n\n// => [ 0, 6.283185307179586 ]\n```\n\n## API\n\n#### `require('integrate-adaptive-simpson')( f, a, b [, tol, maxdepth]] )`\n\nCompute the definite integral of scalar function f from a to b.\n\n**Arguments:**\n- `f`: The function to be integrated. A function of one variable that returns a value.\n- `a`: The lower limit of integration, <img alt=\"a\" valign=\"middle\" src=\"images/a-2217a6870d.png\" width=\"15\" height=\"28\">.\n- `b`: The upper limit of integration, <img alt=\"b\" valign=\"middle\" src=\"images/b-224c764dec.png\" width=\"13\" height=\"28\">.\n- `tol`: The relative error required for an interval to be subdivided, based on Richardson extraplation. Default tolerance is `1e-8`. Be careful—the total accumulated error may be significantly less and result in more function evaluations than necessary.\n- `maxdepth`: The maximum recursion depth. Default depth is `20`. If reached, computation continues and a warning is output to the console.\n\n**Returns**: The computed value of the definite integral.\n\n#### `require('integrate-adaptive-simpson/vector')( f, a, b [, tol, maxdepth]] )`\n\nCompute the definite integral of vector function f from a to b.\n\n**Arguments:**\n- `f`: The function to be integrated. The first argument is an array of length `n` into which the output must be written. The second argument is the scalar value of the independent variable.\n- `a`: The lower limit of integration, <img alt=\"a\" valign=\"middle\" src=\"images/a-2217a6870d.png\" width=\"15\" height=\"28\">.\n- `b`: The upper limit of integration, <img alt=\"b\" valign=\"middle\" src=\"images/b-224c764dec.png\" width=\"13\" height=\"28\">.\n- `tol`: The relative error required for an interval to be subdivided, based on Richardson extraplation. Default tolerance is `1e-8`.\n- `maxdepth`: The maximum recursion depth. Default depth is `20`. If reached, computation continues and a warning is output to the console.\n\n**Returns**: An `Array` representing The computed value of the definite integral.\n\n## References\nColins, C., [Romberg Integration and Adaptive Quadrature Course Notes](http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf).\n\n## License\n\n(c) 2015 Scijs Authors. MIT License.","maintainers":[{"name":"jaspervdg","email":"th.v.d.gronde@hccnet.nl"},{"name":"mikolalysenko","email":"mikolalysenko@gmail.com"},{"name":"planeshifter","email":"pgb@andrew.cmu.edu"},{"name":"rreusser","email":"rsreusser@gmail.com"}],"time":{"modified":"2016-06-06T00:37:47.523Z","created":"2015-08-01T21:32:59.898Z","1.0.0":"2015-08-01T21:32:59.898Z","1.0.1":"2015-08-01T21:35:54.710Z","1.0.2":"2015-08-01T21:44:11.190Z","1.0.3":"2015-08-01T22:27:07.620Z","1.0.4":"2016-04-03T19:11:21.963Z","1.0.5":"2016-04-03T19:45:47.425Z","1.0.6":"2016-04-03T21:28:11.101Z","1.0.7":"2016-04-04T14:18:28.951Z","1.1.0":"2016-05-22T23:22:51.498Z","1.1.1":"2016-06-06T00:37:47.523Z"},"homepage":"https://github.com/scijs/integrate-adaptive-simpson#readme","keywords":["scijs","integral","definite-integral","integration","calculus","adaptive","romberg"],"repository":{"type":"git","url":"git://github.com/scijs/integrate-adaptive-simpson.git"},"author":{"name":"Ricky Reusser"},"bugs":{"url":"https://github.com/scijs/integrate-adaptive-simpson/issues"},"license":"MIT","readmeFilename":"README.md","users":{"chazu":true},"_attachments":{},"_etag":"\"7VGNSIBMCLO0TGQ24VA0ZTJG7\""}