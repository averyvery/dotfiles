{"name":"ignore","version":"3.1.2","description":"Ignore is a manager and filter for .gitignore rules.","main":"./ignore.js","files":["ignore.js","LICENSE-MIT"],"scripts":{"test":"mocha --reporter spec ./test/ignore.js"},"repository":{"type":"git","url":"git+ssh://git@github.com/kaelzhang/node-ignore.git"},"keywords":["ignore",".gitignore","gitignore","npmignore","rules","manager","filter","regexp","regex","fnmatch","glob","asterisks","regular-expression"],"author":{"name":"kael"},"license":"MIT","bugs":{"url":"https://github.com/kaelzhang/node-ignore/issues"},"dependencies":{},"devDependencies":{"chai":"~1.7.2","mocha":"~1.13.0"},"readme":"[![Build Status](https://travis-ci.org/kaelzhang/node-ignore.svg?branch=master)](https://travis-ci.org/kaelzhang/node-ignore)\n[![Windows Build Status](https://ci.appveyor.com/api/projects/status/github/kaelzhang/node-ignore?branch=master&svg=true)](https://ci.appveyor.com/project/kaelzhang/node-ignore)\n[![npm module downloads per month](http://img.shields.io/npm/dm/ignore.svg)](https://www.npmjs.org/package/ignore)\n\n# ignore\n\n`ignore` is a manager and filter which implemented in pure JavaScript according to the .gitignore [spec](http://git-scm.com/docs/gitignore).\n\nPay attention that [`minimatch`](https://www.npmjs.org/package/minimatch) does not work in the gitignore way. To filter filenames according to .gitignore file, I recommend this module.\n\n##### Tested on\n\n- Linux + Node: `0.8` - `5.x`\n- Windows + Node: `0.10` - `5.x`, node < `0.10` is not tested due to the lack of support of appveyor.\n\n## Table Of Main Contents\n\n- [Usage](#usage)\n- [Guide for 2.x -> 3.x](#upgrade-2x---3x)\n- [Contributing](#contributing)\n\n## Usage\n\n```js\nconst ignore = require('ignore')\nvar ig = ignore().add(['.abc/*', '!.abc/d/'])\n```\n\n### Filter the given paths\n\n```js\nvar paths = [\n  '.abc/a.js',    // filtered out\n  '.abc/d/e.js'   // included\n]\n\nig.filter(paths)  // ['.abc/d/e.js']\n```\n\n### As the filter function\n\n```js\npaths.filter(ig.createFilter()); // ['.abc/d/e.js']\n```\n\n### Win32 paths will be handled\n\n```js\nig.filter(['.abc\\\\a.js', '.abc\\\\d\\\\e.js'])\n// if the code above runs on windows, the result will be\n// ['.abc\\\\d\\\\e.js']\n```\n\n## Why another ignore?\n\n1. `ignore` is a standalone module, and is much simpler so that it could easy work with other programs, unlike [isaacs](https://npmjs.org/~isaacs)'s [fstream-ignore](https://npmjs.org/package/fstream-ignore) which must work with the modules of the fstream family.\n\n2. `ignore` only contains utility methods to filter paths according to the specified ignore rules, so\n  - `ignore` never try to find out ignore rules by traversing directories or fetching from git configurations.\n  - `ignore` don't cares about sub-modules of git projects.\n\n3. Exactly according to [gitignore man page](http://git-scm.com/docs/gitignore), fixes some known matching issues of fstream-ignore, such as:\n  - '`/*.js`' should only match '`a.js`', but not '`abc/a.js`'.\n  - '`**/foo`' should match '`foo`' anywhere.\n  - prevent re-including a file if a parent directory of that file is excluded.\n  - handle trailing whitespaces:\n    - `'a '`(one space) should not match `'a  '`(two spaces).\n    - `'a \\ '` matches `'a  '`\n\n## Methods\n\n### .add(pattern)\n### .add(patterns)\n\n- pattern `String|Ignore` An ignore pattern string, or the `Ignore` instance\n- patterns `Array.<pattern>` Array of ignore patterns.\n\nAdds a rule or several rules to the current manager.\n\nReturns `this`\n\nNotice that a line starting with `'#'`(hash) is treated as a comment. Put a backslash (`'\\'`) in front of the first hash for patterns that begin with a hash, if you want to ignore a file with a hash at the beginning of the filename.\n\n```js\nignore().add('#abc').filter(['#abc'])   // ['#abc']\nignore().add('\\#abc').filter(['#abc'])  // []\n```\n\n`pattern` could either be a line of ignore pattern or a string of multiple ignore patterns, which means we could just `ignore().add()` the content of a ignore file:\n\n```js\nignore().add(fs.readFileSync(filenameOfGitignore).toString()).filter(filenames)\n```\n\n`pattern` could also be an `ignore` instance, so that we could easily inherit the rules of another `Ignore` instance.\n\n### <strike>.addIgnoreFile(path)</strike>\n\nREMOVED in `3.x` for now.\n\nTo upgrade `ignore@2.x` up to `3.x`, use\n\n```js\nconst fs = require('fs')\n\nif (fs.existsSync(filename)) {\n  ignore().add(fs.readFileSync(filename).toString())\n}\n```\n\ninstead.\n\n\n### .filter(paths)\n\nFilters the given array of pathnames, and returns the filtered array.\n\n- paths `Array.<path>` The array of paths to be filtered.\n\n*NOTICE* that each `path` here should be a relative path to the root of your repository. Suppose the dir structure is:\n\n```\n/path/to/your/repo\n    |-- a\n    |   |-- a.js\n    |\n    |-- .b\n    |\n    |-- .c\n         |-- .DS_store\n```\n\nThen the `paths` might be like this:\n\n```js\n[\n  'a/a.js'\n  '.b',\n  '.c/.DS_store'\n]\n```\n\nUsually, you could use [`glob`](http://npmjs.org/package/glob) with `option.mark = true` to fetch the structure of the current directory:\n\n```js\nconst glob = require('glob')\n\nglob('**', {\n  // Adds a / character to directory matches.\n  mark: true\n}, (err, files) => {\n  if (err) {\n    return console.error(err)\n  }\n\n  var filtered = ignore().add(patterns).filter(files)\n  console.log(filtered)\n})\n```\n\n### .createFilter()\n\nCreates a filter function which could filter an array of paths with `Array.prototype.filter`.\n\nReturns `function(path)` the filter function.\n\n****\n\n## Upgrade 2.x -> 3.x\n\n- All `options` of 2.x are unnecessary and removed, so just remove them.\n- `ignore()` instance is no longer an [`EventEmitter`](nodejs.org/api/events.html), and all events are unnecessary and removed.\n- `.addIgnoreFile()` is removed, see the [.addIgnoreFile](#addignorefilepath) section for details.\n\n****\n\n## Contributing\n\nThe code of `node-ignore` is based on es6 and babel, but babel and its preset is not included in the `dependencies` field of package.json, so that the installation process of test cases will not fail in older versions of node.\n\nSo use `bash install.sh` to install dependencies and `bash test.sh` to run test cases in your local machine.\n\n#### Collaborators\n\n- [SamyPesse](https://github.com/SamyPesse) *Samy Pess√©*\n- [azproduction](https://github.com/azproduction) *Mikhail Davydov*\n- [TrySound](https://github.com/TrySound) *Bogdan Chadkin*\n- [JanMattner](https://github.com/JanMattner) *Jan Mattner*\n","readmeFilename":"README.md","homepage":"https://github.com/kaelzhang/node-ignore#readme","_id":"ignore@3.1.2","_shasum":"dd17765e9233b4019762ba82b892202b0980161b","_resolved":"https://registry.npmjs.org/ignore/-/ignore-3.1.2.tgz","_from":"https://registry.npmjs.org/ignore/-/ignore-3.1.2.tgz"}