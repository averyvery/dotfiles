{"name":"webpack-bundle-size-analyzer","version":"2.0.1","description":"A utility to find how your dependencies are contributing to the size of your Webpack bundles","main":"build/size_tree.js","scripts":{"test":"make test"},"bin":{"webpack-bundle-size-analyzer":"./webpack-bundle-size-analyzer"},"keywords":["webpack"],"author":{"name":"Robert Knight","email":"robertknight@gmail.com"},"license":"ISC","dependencies":{"commander":"^2.7.1","filesize":"^3.1.2","humanize":"0.0.9"},"files":["build","webpack-bundle-size-analyzer"],"homepage":"http://github.com/robertknight/webpack-bundle-size-analyzer","repository":{"type":"git","url":"git+ssh://git@github.com/robertknight/webpack-bundle-size-analyzer.git"},"devDependencies":{"chai":"^2.2.0","mocha":"^2.2.1","tsd":"^0.6.0-beta.5","typescript":"^1.6.2"},"readme":"Webpack Bundle Size Analyzer\n============================\n\n[![Build Status](https://travis-ci.org/robertknight/webpack-bundle-size-analyzer.png?branch=master)](https://travis-ci.org/robertknight/webpack-bundle-size-analyzer)\n\nA small utility to help you find out what is contributing\nto the size of your [Webpack](http://webpack.github.io/) bundles.\n\nWebpack has a JSON output mode which produces detailed machine-readable\ninformation about everything that has been included in a generated bundle.\n\nThis output is produced by running `webpack --json`. This tool analyzes\nthe resulting JSON output and displays a tree of packages that were included\nin the bundle, ordered by the size of all the used modules.\n\nFor further reading on reducing the size of Webpack bundles,\nsee their [optimization guide](http://webpack.github.io/docs/optimization.html)\n\n## Usage\n\n````\nnpm install -g webpack-bundle-size-analyzer\nwebpack --json | webpack-bundle-size-analyzer\n````\n\nWhen run on [react-testing](https://github.com/robertknight/react-testing) for example,\nit produces this output, where `<self>` refers to the size of the bundle's own code.\n\n````\nreact: 641.95 kB (55.3%)\n  <self>: 641.95 kB (100%)\nchai: 125.8 kB (10.8%)\n  deep-eql: 7.51 kB (5.97%)\n    type-detect: 2.72 kB (36.2%)\n      <self>: 2.72 kB (100%)\n    <self>: 4.79 kB (63.8%)\n  assertion-error: 2.29 kB (1.82%)\n    <self>: 2.29 kB (100%)\n  <self>: 116 kB (92.2%)\nflummox: 73.46 kB (6.33%)\n  flux: 9.01 kB (12.3%)\n    <self>: 9.01 kB (100%)\n  eventemitter3: 5.94 kB (8.08%)\n    <self>: 5.94 kB (100%)\n  uniqueid: 947 B (1.26%)\n    <self>: 947 B (100%)\n  object-assign: 484 B (0.643%)\n    <self>: 484 B (100%)\n  <self>: 57.12 kB (77.8%)\nq: 58.84 kB (5.07%)\n  <self>: 58.84 kB (100%)\n...\n<self>: 195.57 kB (16.9%)\n````\n\n### Important Note About Minification\n\nThe statistics reported for modules in Webpack's JSON output do\ntake into account transformations resulting from loaders, but\nnot plugins which operate on the whole generated bundle.\n\nThe [recommended approach](http://webpack.github.io/docs/optimization.html)\nto minifying JavaScript in Webpack bundles is to use the UglifyJS plugin,\nwhich operates on the whole bundle. Consequently the stats shown by webpack-bundle-size-analyzer\nwill report sizes _before_ minification. This should still give a pretty good idea of what\ncontributes to your bundle size but some libraries will compress better than others,\nso they can be misleading.\n\nA workaround is to generate a Webpack build using [the UglifyJS loader](https://www.npmjs.com/package/uglify-loader)\ninstead and use the JSON output from that. Since the loader runs on individual files before they are bundled,\nthe accounting will be correct.\n\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/robertknight/webpack-bundle-size-analyzer/issues"},"_id":"webpack-bundle-size-analyzer@2.0.1","_shasum":"215364b1c28fb262eed4f79ff74034d287373a4d","_resolved":"https://registry.npmjs.org/webpack-bundle-size-analyzer/-/webpack-bundle-size-analyzer-2.0.1.tgz","_from":"https://registry.npmjs.org/webpack-bundle-size-analyzer/-/webpack-bundle-size-analyzer-2.0.1.tgz"}