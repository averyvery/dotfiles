{"name":"postcss-loader","version":"0.8.2","description":"PostCSS loader for webpack","keywords":["webpack","loader","css","postcss","postcss-runner"],"author":{"name":"Andrey Sitnik","email":"andrey@sitnik.ru"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/postcss/postcss-loader.git"},"dependencies":{"loader-utils":"^0.2.12","postcss":"^5.0.19"},"devDependencies":{"eslint-config-postcss":"2.0.2","postcss-safe-parser":"1.0.7","webpack-stream":"3.1.0","gulp-eslint":"2.0.0","json-loader":"0.5.4","raw-loader":"0.5.1","postcss-js":"0.1.2","gulp-mocha":"2.2.0","fs-extra":"0.26.5","chai":"3.5.0","gulp":"3.9.1"},"scripts":{"test":"gulp"},"readme":"# PostCSS for Webpack [![Build Status][ci-img]][ci]\n\n<img align=\"right\" width=\"95\" height=\"95\"\n     title=\"Philosopher’s stone, logo of PostCSS\"\n     src=\"http://postcss.github.io/postcss/logo.svg\">\n\n[PostCSS] loader for [webpack] to postprocesses your CSS with [PostCSS plugins].\n\n<a href=\"https://evilmartians.com/?utm_source=postcss-loader\">\n<img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\" alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n[PostCSS plugins]: https://github.com/postcss/postcss#plugins\n[PostCSS]:         https://github.com/postcss/postcss\n[webpack]:         http://webpack.github.io/\n[ci-img]:          https://travis-ci.org/postcss/postcss-loader.svg\n[ci]:              https://travis-ci.org/postcss/postcss-loader\n\n## Usage\n\nSet `postcss` section in webpack config:\n\n```js\nvar autoprefixer = require('autoprefixer');\nvar precss       = require('precss');\n\nmodule.exports = {\n    module: {\n        loaders: [\n            {\n                test:   /\\.css$/,\n                loader: \"style-loader!css-loader!postcss-loader\"\n            }\n        ]\n    },\n    postcss: function () {\n        return [autoprefixer, precss];\n    }\n}\n```\n\nNow your CSS files requirements will be processed by selected PostCSS plugins:\n\n```js\nvar css = require('./file.css');\n// => CSS after Autoprefixer and CSSWring\n```\n\nNote that the context of this function\n\n```js\nmodule.exports = {\n    ...\n    postcss: function () {\n        return [autoprefixer, precss];\n    }\n}\n```\n\nwill be set to the [webpack loader-context].\nIf there is the need, this will let you access to webpack loaders API.\n\n[webpack loader-context]: http://webpack.github.io/docs/loaders.html#loader-context\n\n## Plugins Packs\n\nIf you want to process different styles by different PostCSS plugins you can\ndefine plugin packs in `postcss` section and use them by `?pack=name` parameter.\n\n```js\nmodule.exports = {\n    module: {\n        loaders: [\n            {\n                test:   /\\.docs\\.css$/,\n                loader: \"style-loader!css-loader!postcss-loader?pack=cleaner\"\n            },\n            {\n                test:   /\\.css$/,\n                loader: \"style-loader!css-loader!postcss-loader\"\n            }\n        ]\n    },\n    postcss: function () {\n        return {\n            defaults: [autoprefixer, precss],\n            cleaner:  [autoprefixer({ browsers: [] })]\n        };\n    }\n}\n```\n\n## Integration with postcss-import\n\nWhen using [postcss-import] plugin, you may want to tell webpack about\ndependencies coming from your `@import` directives.\nFor example: in watch mode, to enable recompile on change.\n\nHere is a simple way to let know postcss-import to pass files to webpack:\n\n```js\nvar postcssImport = require('postcss-import');\n\nmodule.exports = {\n    module: {\n        loaders: [\n            {\n                test:   /\\.css$/,\n                loader: \"style-loader!css-loader!postcss-loader\"\n            }\n        ]\n    },\n    postcss: function (webpack) {\n        return [\n            postcssImport({\n                addDependencyTo: webpack\n            })\n        ];\n    }\n}\n```\n\n[webpack loader-context]: http://webpack.github.io/docs/loaders.html#loader-context\n[postcss-import]:         https://github.com/postcss/postcss-import\n\n## Integration with CSS Modules\n\n`postcss-loader` [cannot be used] with [CSS Modules] out of the box due\nto the way `css-loader` processes file imports. To make them work properly,\neither add the css-loader’s [`importLoaders` option]:\n\n```js\n{\n    test:   /\\.css$/,\n    loader: \"style-loader!css-loader?modules&importLoaders=1!postcss-loader\"\n}\n```\n\nor replace `css-loader` with [postcss-modules] plugin.\n\n[`importLoaders` option]: https://github.com/webpack/css-loader#importing-and-chained-loaders\n[postcss-modules]:        https://github.com/outpunk/postcss-modules\n[cannot be used]:         https://github.com/webpack/css-loader/issues/137\n[CSS Modules]:            https://github.com/webpack/css-loader#css-modules\n\n## JS Styles\n\nIf you want to process styles written in JavaScript\nyou can use the [postcss-js] parser.\n\n```js\n{\n    test:   /\\.style.js$/,\n    loader: \"style-loader!css-loader!postcss-loader?parser=postcss-js\"\n}\n```\n\nOr use can use even ES6 in JS styles by Babel:\n\n```js\n{\n    test:   /\\.style.js$/,\n    loader: \"style-loader!css-loader!postcss-loader?parser=postcss-js!babel\"\n}\n```\n\nAs result you will be able to write styles as:\n\n```js\nimport colors from '../config/colors';\n\nexport default {\n    '.menu': {\n        color: colors.main,\n        height: 25,\n        '&_link': {\n            color: 'white'\n        }\n    }\n}\n```\n\n[postcss-js]: https://github.com/postcss/postcss-js\n\n## Custom Syntaxes\n\nPostCSS can transforms styles in any syntax, not only in CSS.\nThere are 3 parameters to control syntax:\n\n* `syntax` accepts module name with `parse` and `stringify` function.\n* `parser` accepts module name with input parser function.\n* `stringifier` accepts module name with output stringifier function.\n\nFor example, you can use [Safe Parser] to find and fix any CSS errors:\n\n```js\nvar css = require('postcss?parser=postcss-safe-parser!./broken')\n```\n\n[Safe Parser]: https://github.com/postcss/postcss-safe-parser\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/postcss/postcss-loader/issues"},"homepage":"https://github.com/postcss/postcss-loader#readme","_id":"postcss-loader@0.8.2","_shasum":"ba673bc75bd6be403676e032bfe767ecabe94fa9","_resolved":"https://registry.npmjs.org/postcss-loader/-/postcss-loader-0.8.2.tgz","_from":"https://registry.npmjs.org/postcss-loader/-/postcss-loader-0.8.2.tgz"}