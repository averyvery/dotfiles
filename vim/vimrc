" @group vundle

filetype off

set rtp+=~/.vim/bundle/vundle/
set rtp+=~/.vim/
set rtp+=~/.vim/snippets
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" My Bundles here
" original repos on github
Bundle 'tpope/vim-fugitive'
Bundle 'sjl/gundo.vim'
Bundle 'vim-scripts/L9'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'scrooloose/nerdtree'
Bundle 'shemerey/vim-peepopen'
Bundle 'skammer/vim-css-color'
Bundle 'vim-scripts/vimwiki'
Bundle 'SirVer/ultisnips'
Bundle 'Lokaltog/vim-powerline'
Bundle 'sickill/vim-pasta'
Bundle 'tpope/vim-commentary'
Bundle 'markabe/bufexplorer'
Bundle 'sjl/clam.vim'
Bundle 'wookiehangover/jshint.vim'
Bundle 'duff/vim-scratch'
Bundle 'kien/ctrlp.vim'
Bundle 'vim-scripts/Vicle'
Bundle 'scrooloose/syntastic'

" keep vim indent guides LAST. It messes stuff up
Bundle 'nathanaelkane/vim-indent-guides'

" Brief help
" :BundleList        - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles

" @end

" @group weird settings

set nocompatible
set modelines=0
set encoding=utf-8
set wildmode=longest:full
set wildmenu
set ttyfast
set showbreak=↵
set virtualedit=onemore
set invmmta
set noeb vb t_vb=
au GUIEnter * set vb t_vb=
set tm=200
set timeoutlen=200
set relativenumber
set undofile
set scrolloff=5
set nocompatible
let mapleader="\\"

set wrap
set showbreak=--->\  " prefix for soft-wrapped lines (no actual line break character)
"set linebreak          " soft-wrap lines only at certain characters (see :help breakat)

" If you like line numbers, you may want this instead:
"set number
"set showbreak=------>\  " line up soft-wrap prefix with the line numbers
"set cpoptions+=n        " start soft-wrap lines (and any prefix) in the line-number area

" @end

" @group setup properties i barely understand

" http://stackoverflow.com/questions/3478755/macvim-open-file-in-existing-window
autocmd BufWinEnter,BufNewFile * silent tab

" http://stuvel.eu/blog/57/highlighting-the-current-line-column-in-vim
" http://briancarper.net/blog/590/cursorcolumn--cursorline-slowdown
" set cursorline cursorcolumn

" http://www.reddit.com/r/vim/comments/t1lhc/cursorcolumn_cursorline_slowdown/

autocmd CursorHold * setlocal cursorline cursorcolumn
autocmd CursorMoved,InsertEnter *
  \ if &l:cursorline | setlocal nocursorline nocursorcolumn | endif

" The default for 'backspace' is very confusing to new users, so change it to a
" more sensible value.  Add "set backspace&" to your ~/.vimrc to reset it.
set backspace=indent,eol,start

" Disable localized menus for now since only some items are translated (e.g.
" the entire MacVim menu is set up in a nib file which currently only is
" translated to English).
set langmenu=none

" Clipboard
" http://stackoverflow.com/questions/677986/vim-copy-selection-to-os-x-clipboard
set clipboard=unnamed

" Plugins
filetype plugin on

autocmd BufWinEnter,BufNewFile * let g:UltiSnipsSnippetDirectories=['snippets']

set undodir=~/.vim/tmp/undo//
set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//

" exe "cd ~/Sites/"

" @end

" @group visuals

colorscheme handcrafted
set guioptions=Acer
set guifont=Anonymous\ Pro:h11
set linespace=2

set statusline=%F%m%r%h%w\ %{fugitive#statusline()}\ [POS=%04l,%04v]
set laststatus=2

let g:Powerline_stl_path_style = 'relative'
call Pl#Theme#RemoveSegment('scrollpercent')
call Pl#Theme#RemoveSegment('fileformat')
call Pl#Theme#RemoveSegment('fileencoding')
call Pl#Theme#RemoveSegment('filetype')

" @end

" @group buffers and windows

nmap <right> :bp<cr>
nmap <left> :bn<cr>
nmap <up> :vert sb #<cr>
nmap <down> :sb #<CR>
nmap <tab> <C-w>w
nmap <s-tab> <C-w>h
nmap <tab><tab> :BufExplorer<CR>
nmap <s-tab><s-tab> :BufExplorerVerticalSplit<CR>
nmap <esc> <C-w>c
nmap <esc><esc> :bufdo bdelete<CR>:echo 'Buffers cleared'<CR>

" @end

@group reference

nmap <backspace><backspace> :Sscratch<CR>
nmap <backspace> :vs ~/dotfiles/vim/wiki/index.wiki<CR>

@end

" @group indents and tabs

" Tabs
"
set expandtab
set shiftwidth=2
set tabstop=2
set autoindent

" Invisibles
set listchars=tab:\>-,trail:~,extends:↳,precedes:↵
" set listchars=tab:\->,trail:~,extends:↳,precedes:↵
" set listchars=tab:\->,trail:~,extends:↳,precedes:↵
" set listchars=tab:\+-,trail:~,nbsp:☒,eol:✈

autocmd BufWinEnter,BufNewFile * set list

autocmd BufNewFile,BufRead *.mustache setlocal filetype=html noexpandtab
autocmd BufNewFile,BufRead *.css set filetype=css noexpandtab
autocmd BufNewFile,BufRead *.css.php set filetype=css noexpandtab
autocmd BufNewFile,BufRead *.less set filetype=css noexpandtab
autocmd BufNewFile,BufRead *.scss set filetype=css noexpandtab
autocmd BufNewFile,BufRead *.js set noexpandtab
autocmd BufNewFile,BufRead *.css.sass set filetype=rb
autocmd BufNewFile,BufRead *.mobile.erb setlocal filetype=html noexpandtab shiftwidth=1 tabstop=1
autocmd BufNewFile,BufRead *.html.php setlocal filetype=html noexpandtab shiftwidth=1 tabstop=1
autocmd BufNewFile,BufRead *.html.erb setlocal filetype=html noexpandtab shiftwidth=1 tabstop=1
autocmd BufNewFile,BufRead *.html setlocal filetype=html noexpandtab shiftwidth=1 tabstop=1
autocmd BufEnter * if &filetype == "" | setlocal expandtab shiftwidth=2 | endif
autocmd BufNewFile,BufRead *.rb setlocal expandtab tabstop=2 shiftwidth=2

" @end

" @group expansion and completion

let g:sparkupExecuteMapping = '<c-a>'
let g:UltiSnipsListSnippets = '<s-tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'

" Completion
imap <C-tab> <C-p>

function! s:SparkupNext()
  " 1: empty tag, 2: empty attribute, 3: empty line
  let n = search('><\/\|\(""\)\|^\s*$', 'Wp')
  if n == 3
    startinsert!
  else
    execute 'normal n'
    startinsert
  endif
endfunction

" @end

" @group switching modes

" Remap escape insert mode
imap ,, <Esc>

" Comma save
map <silent> ,, :w<CR>:mksession! ~/.vim_session<CR>:silent! %s/\s\+$//<CR>:w<CR>

" @end

" @group insert mode controls

" @group movement

imap <C-n> <right>
imap <C-d> <left>
imap <C-t> <up>
imap <C-h> <down>
imap <C-b> <s-left>
imap <C-w> <s-right>
imap <C-0> <C-[>0i
imap <C-_> <C-[>-a
cmap <C-n> <right>
cmap <C-d> <left>
cmap <C-t> <up>
cmap <C-h> <down>
cmap <C-b> <s-left>
cmap <C-w> <s-right>
cmap <C-0> <C-[>0i
cmap <C-_> <C-[>-a

" @end

" @group deletion

imap <C-M-d> <C-[>dxi
imap <C-M-n> <C-[>nxi
imap <C-M-w> <C-[>wjwi
imap <C-M-b> <C-[>jbi
imap <C-M-v> <C-[>jwi
imap <C-M-S-v> <C-[>jji
cmap <C-M-d> <C-[>dxi
cmap <C-M-n> <C-[>nxi
cmap <C-M-w> <C-[>wjwi
cmap <C-M-b> <C-[>jbi
cmap <C-M-v> <C-[>jwi
cmap <C-M-S-v> <C-[>jji

" @end

" @end

" @group add blank and spaces

nmap <Enter> o<ESC>
nmap <S-Enter> i<Enter><ESC>
map <C-o> o<C-[>
map <C-O> O<C-[>

" scrolling up and down
" nmap <space> <c-f>zz
" nmap <s-space> <c-b>zz
nmap <space> a<space><esc>
nmap <s-space> a<space><esc>d

" @end

" @group utility remaps

nmap <S-u> <C-r>
nnoremap <leader>u :GundoToggle<CR>

" Sudo save
map <leader>w :w !sudo tee %<Enter>

" @end

" @group project files & searching

nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
" au FocusLost * :wa

map <leader>g :vimgrep // **/*.*<left><left><left><left><left><left><left><left>
map <C-/> :vimgrep // **/*.*<left><left><left><left><left><left><left><left>

let g:NERDTreeWinPos="right"

nmap <silent> ` :PeepOpen<CR>
let NERDTreeMapOpenInTab='\t'
nmap <silent> `` :NERDTree<CR>

let g:ctrlp_working_path_mode = 0

let g:ctrlp_prompt_mappings = {
  \ 'PrtClearCache()':       ['<c-r>'],
  \ 'PrtSelectMove("j")':    ['<c-h>'],
  \ 'PrtSelectMove("k")':    ['<c-t>'],
  \ 'PrtCurLeft()':          ['<c-d>'],
  \ 'PrtCurRight()':         ['<c-n>'],
  \ 'AcceptSelection("vs")': ['<s-Enter>'],
  \ 'PrtCurStart()':         ['<c-0>'],
  \ 'PrtCurEnd()':           ['<c-->']
  \ }

" @end

" @group dvorak

no d h
no h j
no <c-m-h> <s-l>
no <s-h> 10j
no t k
no k t
no <s-k> <s-t>
no <c-m-t> <s-h>
no <s-t> 10k
no n l
no <c-m-n> <s-m>
no s :
no - $
no _ 0
no j d
no l n
no L N

" quick macros
no <c-.> @q

" quick ultisnip exit
smap , <esc>

let g:UltiSnipsRemoveSelectModeMappings = 0

" Bubbling
no <c-m-t> :m-2<cr>
no <c-m-h> :m+<cr>

" @end

" @group updating vimrc

nmap <Leader>v :vs $MYVIMRC<CR>
nmap <Leader>vv :echo ".vimrc reloaded!"<CR>:silent source $MYVIMRC<CR>

" @end

" @group indenting and folding

set foldmethod=marker
set foldmarker=@group,@end
set fillchars=stl:\ ,stlnc:\ ,vert:\|,fold:\ ,diff:-

let g:indent_guides_auto_colors = 0

function! StartUp()
  IndentGuidesToggle
  :normal zM
endfunction

" autocmd VimEnter * call StartUp()
autocmd BufWinEnter,BufNewFile * call StartUp()

" Folds
nmap <M-h> zj
nmap <M-t> zk
nmap <M-d> zc
nmap <M-n> zo

" Adapted from http://vim.wikia.com/wiki/Back_and_forth_between_indented_lines_again
function! MoveIndent(forward, out, in)
  let line = line('.')
  let column = col('.')
  let lastline = line('$')
  let indent = indent(line)
  let stepvalue = a:forward ? 1 : -1
  while (line > 0 && line <= lastline)
    let line = line + stepvalue
    if (a:out && indent(line) < indent || a:in && indent(line) > indent || indent(line) == indent && !a:out && !a:in)
      if (strlen(getline(line)) > 0)
        exe line
        exe "normal " column . "|"
        return
      endif
    endif
  endwhile
endfunction

function! IndentEnd()
  call MoveIndent(1, 0, 0)
endfunction

function! IndentStart()
  call MoveIndent(0, 0, 0)
endfunction

function! IndentOuter()
  call MoveIndent(0, 1, 0)
endfunction

function! IndentInner()
  call MoveIndent(1, 0, 1)
endfunction

function! BindIndentAction(key)
  exe ":nnoremap " . a:key . "<C-h> :normal ^mm<CR> :call IndentEnd()<CR> :normal " . a:key . "'m<CR>"
  exe ":nnoremap " . a:key . "<C-t> :normal ^mm<CR> :call IndentStart()<CR> :normal " . a:key . "'m<CR>"
  exe ":nnoremap " . a:key . "<C-d> :call IndentOuter()<CR> :normal ^mm<CR> :call IndentEnd()<CR> :normal " . a:key . "'m<CR>"
  exe ":nnoremap " . a:key . "<C-n> :normal ^hmmt<CR> :call IndentEnd()<CR> :normal t<CR> :normal " . a:key . "'m<CR>"
endfunction

nnoremap <C-h> :call IndentEnd()<CR>
nnoremap <C-t> :call IndentStart()<CR>
nnoremap <C-d> :call IndentOuter()<CR>
nnoremap <C-n> :call IndentInner()<CR>

autocmd VimEnter * call BindIndentAction('j')
autocmd VimEnter * call BindIndentAction('y')
autocmd VimEnter * call BindIndentAction('<')
autocmd VimEnter * call BindIndentAction('>')

" @end

" @group session

set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize
source ~/.vim_session

function! Clear()
  echo 'Session cleared'
  :silent !rm ~/.vim_session
endfunction

nmap <esc><esc><esc> :call Clear()<CR>

" @end

" @group command line

function! Screen()
  let command = input("command: ")
  call system("screen -S vim -p 0 -X stuff " . command . "\r")
endfunction

map <c-f><c-f> :call Screen()<CR>

let g:vicle_session_name    = 'vim'
let g:vicle_session_window  = '0'

let g:vicle_history_active   = 1 " active history
let g:vicle_edition_mode     = 1 " active edition mode
let g:vicle_selection_string = "0v$y"  " yank current line

let g:vicle_hcs             = '~~~your_command_separator~~~'

" map <c-g><c-g> :silent !echo -n > ~/screenlog.0<CR>:split ~/screenlog.0<CR>:setlocal autoread<CR>
map <c-g><c-g> :split ~/screenlog.0<CR>:setlocal autoread<CR>

" @end

" @group syntastic

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1
let g:syntastic_quiet_warnings = 1

let g:syntastic_mode_map = {
  \ 'mode': 'active',
  \ 'active_filetypes': ['php'],
  \ 'passive_filetypes': ['html', 'js']
  \ }

nnoremap <leader>s :SyntasticCheck<CR>

" @end
