" @group vundle

filetype off

set rtp+=~/.vim/bundle/vundle/
set rtp+=~/.vim/
set rtp+=~/.vim/snippets
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" My Bundles here
" original repos on github
Bundle 'tpope/vim-fugitive'
Bundle 'sjl/gundo.vim'
Bundle 'vim-scripts/L9'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'scrooloose/nerdtree'
Bundle 'shemerey/vim-peepopen'
Bundle 'skammer/vim-css-color'
Bundle 'vim-scripts/vimwiki'
Bundle 'SirVer/ultisnips'
Bundle 'Lokaltog/vim-powerline'
Bundle 'sickill/vim-pasta'
Bundle 'tpope/vim-commentary'
Bundle 'markabe/bufexplorer'
Bundle 'sjl/clam.vim'
Bundle 'averyvery/jshint.vim'
Bundle 'averyvery/vim-scratch'
Bundle 'scrooloose/syntastic'
Bundle 'majutsushi/tagbar'
Bundle 'mikewest/vimroom'
Bundle 'mileszs/ack.vim'
Bundle 'jtaby/Waldo'
Bundle 'vim-scripts/genutils'
Bundle 'averyvery/vim-browsereload-mac'

" keep vim indent guides LAST. It messes stuff up
Bundle 'nathanaelkane/vim-indent-guides'

" Brief help
" :BundleList        - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles

" @end

" @group weird settings

set nocompatible
set modelines=0
set encoding=utf-8
set wildmode=longest:full
set wildmenu
set ttyfast
set virtualedit=onemore
set invmmta
set noeb vb t_vb=
au GUIEnter * set vb t_vb=
set scrolloff=5
set nocompatible
set lazyredraw
set wrap
set showbreak=--->\  " prefix for soft-wrapped lines (no actual line break character)
set clipboard=unnamed
set langmenu=none
set backspace=indent,eol,start
filetype plugin on

" http://stackoverflow.com/questions/3478755/macvim-open-file-in-existing-window
autocmd BufWinEnter,BufNewFile * silent tab

" http://www.reddit.com/r/vim/comments/t1lhc/cursorcolumn_cursorline_slowdown/
autocmd CursorHold * setlocal cursorline cursorcolumn
autocmd CursorMoved,InsertEnter *
  \ if &l:cursorline | setlocal nocursorline nocursorcolumn | endif

set undofile
set undodir=~/.vim/tmp/undo//
set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//

autocmd BufWinEnter,BufNewFile * let g:UltiSnipsSnippetDirectories=['snippets']

" @end

" @group numbers

set relativenumber
set numberwidth=1
autocmd BufLeave * setlocal nonumber norelativenumber
autocmd BufEnter * setlocal number relativenumber

" @end

" @group timing

set timeout
set ttimeout
set timeoutlen=500
set ttimeoutlen=150

autocmd InsertEnter * setlocal timeoutlen=150
autocmd InsertLeave * setlocal timeoutlen=500

" @end

" @group leader

let mapleader="\\"

nmap <leader><space> :set nowrap<CR>
nmap <leader><s-space> :set wrap<CR>
nmap <leader>u :GundoToggle<CR>
nmap <leader>w :w !sudo tee %<Enter>
nmap <leader>g :vimgrep // **/*.*<left><left><left><left><left><left><left><left>
nmap <C-/> :vimgrep // **/*.*<left><left><left><left><left><left><left><left>
nmap <leader>a :Ack --type=
nmap <leader>s :SyntasticCheck<CR>
nmap <leader><esc> :bufdo bdelete<CR>:echo 'Buffers cleared'<CR>

let Tlist_Ctags_Cmd = '/usr/local/bin/ctags'
nmap <silent> <leader>t :TlistToggle<CR>
nmap <silent> <leader>b :BufExplorer<CR>
nmap <leader>c :topleft cwindow<CR>

function! Load()
  echo 'Session loaded'
  source ~/.vim_session
endfunction

nmap <leader>o :call Load()<CR>

nmap <D-F> <Plug>Waldo

" @end

" @group statusline

" set showcmd       " Display the command in the last line
" set showmode      " Display the current mode in the last line
" set report=1      " Always report the number of lines changed
set ruler         " Display info on current position
set laststatus=2  " Always show status line
" set statusline=Editing:\ %r%t%m\ %=Location:\ Line\ %l/%L\ \ Col:\ %c\ (%p%%)

" @end

" @group visuals

colorscheme handcrafted
colorscheme handcrafted
set guioptions=Acer
" set guifont=Anonymous\ Pro:h12
" set guifont=Anonymous\ Pro:h12
" set guifont=Monaco:h10
" set guifont=DroidSansMono:h9
" set guifont=Anonymous\ Pro:h12
" set guifont=DroidSansMono:h12
" set guifont=Andale\ Mono:h12
" set guifont=Monaco:h12
set guifont=Menlo:h12
" set noantialias
set linespace=5

let g:Powerline_stl_path_style = 'relative'
call Pl#Theme#RemoveSegment('mode_indicator')
call Pl#Theme#RemoveSegment('fugitive:branch')
call Pl#Theme#RemoveSegment('scrollpercent')
call Pl#Theme#RemoveSegment('fileformat')
call Pl#Theme#RemoveSegment('fileencoding')
call Pl#Theme#RemoveSegment('filetype')

" @end

@group reference

nmap <left> :Sscratch<CR>
nmap <backspace> :topleft split ~/dotfiles/vim/wiki/index.wiki<CR>:setlocal nonumber<CR>

@end

" @group indents and tabs

" Tabs
"
set expandtab
set shiftwidth=2
set tabstop=2
set smartindent

" Invisibles
set listchars=tab:\>-,trail:~,extends:↳,precedes:↵
" set listchars=tab:\->,trail:~,extends:↳,precedes:↵
" set listchars=tab:\->,trail:~,extends:↳,precedes:↵
" set listchars=tab:\+-,trail:~,nbsp:☒,eol:✈

autocmd BufWinEnter,BufNewFile * set list

autocmd BufNewFile,BufRead *.css setlocal filetype=css noexpandtab
autocmd BufNewFile,BufRead *.css.php setlocal filetype=css noexpandtab
autocmd BufNewFile,BufRead *.less setlocal filetype=css noexpandtab
autocmd BufNewFile,BufRead *.scss setlocal filetype=css noexpandtab
autocmd BufNewFile,BufRead *.js setlocal noexpandtab
autocmd BufNewFile,BufRead *.css.sass set filetype=rb
autocmd BufNewFile,BufRead *.mobile.erb setlocal filetype=html noexpandtab shiftwidth=1 tabstop=1
autocmd BufNewFile,BufRead *.html.php setlocal filetype=html noexpandtab shiftwidth=1 tabstop=1
autocmd BufNewFile,BufRead *.html.erb setlocal filetype=html noexpandtab shiftwidth=1 tabstop=1
autocmd BufNewFile,BufRead *.erb setlocal filetype=html noexpandtab shiftwidth=1 tabstop=1
autocmd BufNewFile,BufRead *.html setlocal filetype=html noexpandtab shiftwidth=1 tabstop=1
autocmd BufEnter * if &filetype == "" | setlocal expandtab shiftwidth=2 | endif
autocmd BufNewFile,BufRead *.rb setlocal expandtab tabstop=2 shiftwidth=2

" @end

" @group expansion and completion

" function! g:expandUltisnip()
"   exec g:_uspy 'UltiSnips_Manager.expand()'
"   exec '<esc>'
" endfunction

" imap <tab> <c-o>:call g:expandUltisnip()<CR><esc>

let g:sparkupExecuteMapping = '<c-a>'
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsListSnippets = '<m-tab>'

" Completion
imap <S-tab> <C-p>

function! s:SparkupNext()
  " 1: empty tag, 2: empty attribute, 3: empty line
  let n = search('><\/\|\(""\)\|^\s*$', 'Wp')

  if n == 3
    startinsert!
  else
    execute 'normal n'
    startinsert
  endif
endfunction

" @end

" @group insert mode controls

" @group movement

imap <C-n> <right>
imap <C-d> <left>
imap <C-t> <up>
imap <C-h> <down>
imap <C-b> <s-left>
imap <C-w> <s-right>
imap <C-0> <C-[>0i
imap <C-_> <C-[>-a
cmap <C-n> <right>
cmap <C-d> <left>
cmap <C-t> <up>
cmap <C-h> <down>
cmap <C-b> <s-left>
cmap <C-w> <s-right>

" @end

" @group deletion

imap <C-M-d> <C-[>dxi
imap <C-M-n> <C-[>nxi
imap <C-M-w> <C-[>wjwi
imap <C-M-b> <C-[>jbi
imap <C-M-v> <C-[>jwi
imap <C-M-S-v> <C-[>jji
cmap <C-M-d> <C-[>dxi
cmap <C-M-n> <C-[>nxi
cmap <C-M-w> <C-[>wjwi
cmap <C-M-b> <C-[>jbi
cmap <C-M-v> <C-[>jwi
cmap <C-M-S-v> <C-[>jji

" @end

" @end

" @group add blank and spaces

nmap <Enter> o<ESC>
nmap <S-Enter> i<Enter><ESC>
map <C-o> o<C-[>
map <C-O> O<C-[>

nmap <space> a<space><esc>
nmap <s-space> a<space><esc>d

" @end

" @group file management and searches

nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch

" map <silent> <esc> :w<CR>:mksession! ~/.vim_session<CR>:silent! %s/\s\+$//<CR>:w<CR>
" not really working
function! Reload()
  echo &filetype
  if &filetype == 'javascript' || &filetype == 'html' || &filetype == 'css'
    echo "Reloading Chrome"
    call :ChromeReload()
  endif
endfunction

let g:returnApp = "Google Chrome"

nmap <silent> <esc> :silent! w<CR>:silent! %s/\s\+$//<CR>:w<CR>
nmap <silent> <s-esc> :silent! w<CR>:silent! %s/\s\+$//<CR>:silent! w<CR>:ChromeReload<CR>

let g:NERDTreeWinPos='right'
let NERDTreeMapOpenInTab='\t'
nmap <silent> ` :PeepOpen<CR>
nmap <silent> <right> :NERDTree<CR>
"
" @end

" @group dvorak

no d h
no h j
no <c-m-h> <s-l>
no <s-h> 10j
no t k
no k t
no <s-k> <s-t>
no <c-m-t> <s-h>
no <s-t> 10k
no n l
no <c-m-n> <s-m>
no s :
no - $
no _ 0
no j d
no l n
no L N
nmap <S-u> <C-r>

" moving around on screen
no B H
no W L

no J "_dd

" quick macros
no <c-.> @q

" quick ultisnip exit
smap , <esc>

let g:UltiSnipsRemoveSelectModeMappings = 0

" Bubbling
no <c-m-t> :m-2<cr>
no <c-m-h> :m+<cr>
no <c-m-n> <<
no <c-m-s> >>

" @end

" @group indenting and folding

set foldmethod=marker
set foldmarker=@group,@end
set fillchars=stl:\ ,stlnc:\ ,vert:\|,fold:\ ,diff:-
" set foldclose=all

let g:indent_guides_auto_colors = 0
autocmd BufWinEnter,BufNewFile * :IndentGuidesEnable

" Folds
nmap <M-h> zj
nmap <M-t> zk
nmap <M-d> zc
nmap <M-n> zo

" Adapted from http://vim.wikia.com/wiki/Back_and_forth_between_indented_lines_again
function! MoveIndent(forward, out, in)
  let line = line('.')
  let column = col('.')
  let lastline = line('$')
  let indent = indent(line)
  let stepvalue = a:forward ? 1 : -1
  while (line > 0 && line <= lastline)
    let line = line + stepvalue
    if (a:out && indent(line) < indent || a:in && indent(line) > indent || indent(line) == indent && !a:out && !a:in)
      if (strlen(getline(line)) > 0)
        exe line
        exe "normal " column . "|"
        return
      endif
    endif
  endwhile
endfunction

function! IndentEnd()
  call MoveIndent(1, 0, 0)
endfunction

function! IndentStart()
  call MoveIndent(0, 0, 0)
endfunction

function! IndentOuter()
  call MoveIndent(0, 1, 0)
endfunction

function! IndentInner()
  call MoveIndent(1, 0, 1)
endfunction

function! BindIndentAction(key)
  exe ":nnoremap " . a:key . "<C-h> :normal ^mm<CR> :call IndentEnd()<CR> :normal " . a:key . "'m<CR>"
  exe ":nnoremap " . a:key . "<C-t> :normal ^mm<CR> :call IndentStart()<CR> :normal " . a:key . "'m<CR>"
  exe ":nnoremap " . a:key . "<C-d> :call IndentOuter()<CR> :normal ^mm<CR> :call IndentEnd()<CR> :normal " . a:key . "'m<CR>"
  exe ":nnoremap " . a:key . "<C-n> :normal ^hmmt<CR> :call IndentEnd()<CR> :normal t<CR> :normal " . a:key . "'m<CR>"
endfunction

nnoremap <C-h> :call IndentEnd()<CR>
nnoremap <C-t> :call IndentStart()<CR>
nnoremap <C-d> :call IndentOuter()<CR>
nnoremap <C-n> :call IndentInner()<CR>

autocmd VimEnter * call BindIndentAction('j')
autocmd VimEnter * call BindIndentAction('y')
autocmd VimEnter * call BindIndentAction('<')
autocmd VimEnter * call BindIndentAction('>')

" @end

" @group session

set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize

function! Clear()
  echo 'Session cleared'
  :silent !rm ~/.vim_session
endfunction

" @end

" @group syntastic & jshint

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1
let g:syntastic_quiet_warnings = 1

" http://stackoverflow.com/questions/4579300/vimgrep-and-the-quickfix-window-in-macvim
let g:syntastic_auto_loc_list=1

let g:syntastic_mode_map = {
  \ 'mode': 'active',
  \ 'active_filetypes': ['php'],
  \ 'passive_filetypes': ['html', 'js']
  \ }

" @end

" @group buffers and windows

nmap <up> :topleft new #<CR>
nmap <down> :botright new #<cr>
nmap <tab> <C-w>w

" @end

" @group newstuff

nmap <leader>t :TagbarToggle<CR>

" @end

" @group grep

function! Grep()
  let file = input('filetype: ')
  execute 'normal :vimgrep // **/*.' . file . '<left><left><left><left><left><left><left><left>'
endfunction

" nmap <leader>g :call Grep()<CR>

" @end

" @group fugitive

nnoremap <silent> <leader>=s :Gstatus<CR>
nnoremap <silent> <leader>=d :Gdiff<CR>
nnoremap <silent> <leader>=c :Gcommit<CR>
nnoremap <silent> <leader>=b :Gblame<CR>
nnoremap <silent> <leader>=l :Glog<CR>
nnoremap <silent> <leader>=p :Git push<CR>

" @end
