" @group vundle

filetype off
filetype plugin indent on

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

let g:UltiSnipsSnippetDirectories=['snippets']

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" My Bundles here
" original repos on github
Bundle 'tpope/vim-fugitive'
Bundle 'sjl/gundo.vim'
Bundle 'vim-scripts/L9'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'scrooloose/nerdtree'
Bundle 'shemerey/vim-peepopen'
Bundle 'skammer/vim-css-color'
Bundle 'vim-scripts/vimwiki'
Bundle 'SirVer/ultisnips'
Bundle 'Lokaltog/vim-powerline'
Bundle 'sickill/vim-pasta'
Bundle 'tpope/vim-commentary'
Bundle 'markabe/bufexplorer'

" keep vim indent guides LAST. It messes stuff up
Bundle 'nathanaelkane/vim-indent-guides'

" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..
"
" @end

" @group setup properties i barely understand

" http://stackoverflow.com/questions/3478755/macvim-open-file-in-existing-window
autocmd BufWinEnter,BufNewFile * silent tab

" http://stuvel.eu/blog/57/highlighting-the-current-line-column-in-vim
set cursorline cursorcolumn

set nocompatible
set modelines=0
set encoding=utf-8
set wildmode=longest:full
set wildmenu
set ttyfast
set showbreak=â†ª
set virtualedit=onemore
set invmmta
set noeb vb t_vb=
au GUIEnter * set vb t_vb=
set tm=200
set timeoutlen=200
set relativenumber
set undofile
set nowrap
set scrolloff=5
set nocompatible
let mapleader="\\"

" The default for 'backspace' is very confusing to new users, so change it to a
" more sensible value.	Add "set backspace&" to your ~/.vimrc to reset it.
set backspace=indent,eol,start

" Disable localized menus for now since only some items are translated (e.g.
" the entire MacVim menu is set up in a nib file which currently only is
" translated to English).
set langmenu=none

" Clipboard
" http://stackoverflow.com/questions/677986/vim-copy-selection-to-os-x-clipboard
set clipboard=unnamed

" Plugins
filetype plugin on

" Invisibles
autocmd BufWinEnter,BufNewFile * set list

set undodir=~/.vim/tmp/undo//
set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//

exe "cd ~/Sites/"

" @end

" @group visuals

colorscheme handcrafted
set guioptions=Acer
set guifont=Anonymous\ Pro:h12
set linespace=1

set statusline=%F%m%r%h%w\ %{fugitive#statusline()}\ [POS=%04l,%04v]
set laststatus=2

let g:Powerline_stl_path_style = 'relative'
call Pl#Theme#RemoveSegment('scrollpercent')
call Pl#Theme#RemoveSegment('fileformat')
call Pl#Theme#RemoveSegment('fileencoding')
call Pl#Theme#RemoveSegment('filetype')

" @end

" @group buffers and windows

nmap <right> :bp<cr>
nmap <left> :bn<cr>
nmap <up> :vert sb #<cr>
nmap <down> :sb #<CR>
nmap <tab> <C-w>w
nmap <tab><tab> :BufExplorer<CR>
nmap <s-tab><s-tab> :BufExplorerVerticalSplit<CR>
nmap <esc> <C-w>c
nmap <esc><esc> :bufdo bdelete<CR>

" @end

@group reference

let g:vim_reference_file = "~/dotfiles/vim/vim-reference"
let g:vim_reference_width = 45

function! ToggleVimReference()
		if !exists("s:vim_reference_open") || s:vim_reference_open == 0
			let s:vim_reference_open = 1
			execute "botright vnew " . g:vim_reference_file
			execute "vertical resize " . g:vim_reference_width
		else
			update
			execute "bdelete " . g:vim_reference_file
			let s:vim_reference_open = 0
		endif
endfunction

let g:vimwiki_list = [{'path': '~/dotfiles/vim/wiki/', 'path_html': '~/Sites/vimwiki/'}]

nmap <backspace><backspace> :call ToggleVimReference()<CR>
nmap <backspace> :vs ~/dotfiles/vim/wiki/index.wiki<CR>

@end

" @group indenting and folding

set foldmethod=marker
set foldmarker=@group,@end
set fillchars=stl:\ ,stlnc:\ ,vert:\|,fold:\ ,diff:-

let g:indent_guides_auto_colors = 0

function! StartUp()
	if 0 == argc()
		IndentGuidesToggle
	end
endfunction

autocmd VimEnter * call StartUp()

" Folds
nmap <C-h> zj
nmap <C-t> zk
nmap <C-d> zc
nmap <C-n> zo

" http://vim.wikia.com/wiki/Back_and_forth_between_indented_lines_again
nnoremap <M-h> :call search('^'. matchstr(getline(line('.')), '\(\s*\)') .'\S')<CR>^
nnoremap <M-t> k:call search('^'. matchstr(getline(line('.')+1), '\(\s*\)') .'\S', 'b')<CR>^

nnoremap j<M-h> mm:call search('^'. matchstr(getline(line('.')), '\(\s*\)') .'\S')<CR>^ :normal j'm<CR>
nnoremap j<M-t> mm:call search('^'. matchstr(getline(line('.')+1), '\(\s*\)') .'\S', 'b')<CR>^ :normal j'm<CR>

nnoremap y<M-h> mm:call search('^'. matchstr(getline(line('.')), '\(\s*\)') .'\S')<CR>^ :normal y'm<CR>
nnoremap y<M-t> mm:call search('^'. matchstr(getline(line('.')+1), '\(\s*\)') .'\S', 'b')<CR>^ :normal y'm<CR>

nnoremap ><M-h> mm:call search('^'. matchstr(getline(line('.')), '\(\s*\)') .'\S')<CR>^ :normal >'m<CR>
nnoremap ><M-t> mm:call search('^'. matchstr(getline(line('.')+1), '\(\s*\)') .'\S', 'b')<CR>^ :normal >'m<CR>

nnoremap <<M-h> mm:call search('^'. matchstr(getline(line('.')), '\(\s*\)') .'\S')<CR>^ :normal <'m<CR>
nnoremap <<M-t> mm:call search('^'. matchstr(getline(line('.')+1), '\(\s*\)') .'\S', 'b')<CR>^ :normal <'m<CR>

" @end

" @group indents and tabs

" Tabs
set tabstop=2
set shiftwidth=2
set noexpandtab
set autoindent

autocmd BufNewFile,BufRead *.html.php setlocal filetype=html
autocmd BufNewFile,BufRead *.mobile.erb setlocal filetype=html
autocmd BufNewFile,BufRead *.mustache setlocal filetype=html
autocmd BufNewFile,BufRead *.css set filetype=css
autocmd BufNewFile,BufRead *.css.php set filetype=css
autocmd BufNewFile,BufRead *.less set filetype=css
autocmd BufNewFile,BufRead *.scss set filetype=css
autocmd BufNewFile,BufRead *.css.sass set filetype=rb
autocmd BufNewFile,BufRead *.html.erb set filetype=html
autocmd BufEnter * if &filetype == "" | setlocal noexpandtab shiftwidth=2 | endif
autocmd BufNewFile,BufRead *.rb setlocal expandtab shiftwidth=2

" @end

" @group expansion and completion

let g:sparkupExecuteMapping = '<c-a>'
let g:UltiSnipsListSnippets = '<s-tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'

" Completion
imap <C-tab> <C-p>

function! s:SparkupNext()
	" 1: empty tag, 2: empty attribute, 3: empty line
	let n = search('><\/\|\(""\)\|^\s*$', 'Wp')
	if n == 3
		startinsert!
	else
		execute 'normal n'
		startinsert
	endif
endfunction

" @end

" @group switching modes

" Remap escape insert mode
imap ,, <Esc>

" Comma save
map <silent> ,, :w<CR>:mksession! ~/.vim_session<CR>:%s/\s\+$//<CR>:w<CR>

" @end

" @group insert mode controls

" @group movement

imap <C-n> <right>
imap <C-d> <left>
imap <C-t> <up>
imap <C-h> <down>
imap <C-b> <s-left>
imap <C-w> <s-right>
imap <C-0> <C-[>0i
imap <C-_> <C-[>-a
cmap <C-n> <right>
cmap <C-d> <left>
cmap <C-t> <up>
cmap <C-h> <down>
cmap <C-b> <s-left>
cmap <C-w> <s-right>
cmap <C-0> <C-[>0i
cmap <C-_> <C-[>-a

" @end

" @group deletion

imap <C-M-d> <C-[>dxi
imap <C-M-n> <C-[>nxi
imap <C-M-w> <C-[>wjwi
imap <C-M-b> <C-[>jbi
imap <C-M-v> <C-[>jwi
imap <C-M-S-v> <C-[>jji
cmap <C-M-d> <C-[>dxi
cmap <C-M-n> <C-[>nxi
cmap <C-M-w> <C-[>wjwi
cmap <C-M-b> <C-[>jbi
cmap <C-M-v> <C-[>jwi
cmap <C-M-S-v> <C-[>jji

" @end

" @end

" @group add blank and spaces

nmap <Enter> o<ESC>
nmap <S-Enter> O<ESC>
map <C-o> o<C-[>
map <C-O> O<C-[>

" scrolling up and down
" nmap <space> <c-f>zz
" nmap <s-space> <c-b>zz
nmap <space> a<space><esc>
nmap <s-space> a<space><esc>d

" @end

" @group utility remaps

nmap <S-u> <C-r>
nnoremap <leader>u :GundoToggle<CR>

" Sudo save
map <leader>w :w !sudo tee %<Enter>

" @end

" @group project files & searching

nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
" au FocusLost * :wa

map <leader>g :vimgrep // **/*.*<left><left><left><left><left><left><left><left>
map <C-/> :vimgrep // **/*.*<left><left><left><left><left><left><left><left>

let g:NERDTreeWinPos="right"

nmap <silent> ` :PeepOpen<CR>
let NERDTreeMapOpenInTab='\t'
nmap <silent> `` :NERDTree<CR>

" @end

" @group dvorak

no d h
no h j
no <c-m-h> <s-l>
no <s-h> 10j
no t k
no k t
no <s-k> <s-t>
no <c-m-t> <s-h>
no <s-t> 10k
no n l
no <c-m-n> <s-m>
no s :
no <s-s> :!
cmap <space><space> <esc>
cmap ,, <esc>
smap ,, <esc>
no j d
no l n
no L N

" Added benefits
no - $
no _ ^
no Y y$

" Bubbling
no <c-m-t> :m-2<cr>
no <c-m-h> :m+<cr>

" @end

" @group reload chrome

" Reload Google Chrome on Mac from Vim.
" Adapted from:  https://github.com/gcollazo/BrowserRefresh-Sublime/
function! ChromeReload()
python << EOF
from subprocess import call
browser = """
tell application "Google Chrome" to tell the active tab of its first window
    reload
end tell
tell application "Google Chrome" to activate
"""
call(['osascript', '-e', browser])
EOF
endfunction

nnoremap <s-,><s-,> :call ChromeReload()<CR>


" @end

" @group updating vimrc

nmap <Leader>v :vs $MYVIMRC<CR>
nmap <Leader>vv :source $MYVIMRC<CR>:echo ".vimrc reloaded!"<CR>

" @end

" @group session

set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize
source ~/.vim_session

function! Clear()
	:!rm ~/.vim_session
endfunction

nmap <esc><esc><esc> :call Clear()<CR>

" @end
