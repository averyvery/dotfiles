# @group oh-my-zsh

# Path to your oh-my-zsh configuration.
export ZSH=$HOME/.oh-my-zsh

# Set to the name theme to load.
# Look in ~/.oh-my-zsh/themes/
export ZSH_THEME="cloud"

plugins=(git)

source $ZSH/oh-my-zsh.sh

# @end

# @group precmd

  function precmd {
    local TERMWIDTH
    (( TERMWIDTH = ${COLUMNS} - 1 ))
    PR_FILLBAR=""
    PR_PWDLEN=""
    local promptsize=${#${(%):---(%n@%m:%l)---()--}}
    local pwdsize=${#${(%):-%~}}
    if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
      ((PR_PWDLEN=$TERMWIDTH - $promptsize))
    else
      PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..${PR_HBAR}.)}"
    fi
  }

# @end

# @group git

  git_prompt() {
    unset __CURRENT_GIT_BRANCH
    unset __CURRENT_GIT_BRANCH_STATUS
    unset __CURRENT_GIT_BRANCH_IS_DIRTY

    local st="$(git status 2>/dev/null)"
    if [[ -n "$st" ]]; then
      local -a arr
      arr=(${(f)st})

      if [[ $arr[1] =~ 'Not currently on any branch.' ]]; then
        __CURRENT_GIT_BRANCH='no-branch'
      else
        __CURRENT_GIT_BRANCH="${arr[1][(w)4]}";
      fi

      if [[ $arr[2] =~ 'Your branch is' ]]; then
        if [[ $arr[2] =~ 'ahead' ]]; then
          __CURRENT_GIT_BRANCH_STATUS='ahead'
        elif [[ $arr[2] =~ 'diverged' ]]; then
          __CURRENT_GIT_BRANCH_STATUS='diverged'
        else
          __CURRENT_GIT_BRANCH_STATUS='behind'
        fi
      fi

      if [[ ! $st =~ 'nothing to commit' ]]; then
        __CURRENT_GIT_BRANCH_IS_DIRTY='1'
      fi
    fi



    if [ -n "$__CURRENT_GIT_BRANCH" ]; then
      local s="$PR_CYAN("
      s+="$PR_GREEN$__CURRENT_GIT_BRANCH"
      case "$__CURRENT_GIT_BRANCH_STATUS" in
        ahead)
        s+="↑"
        ;;
        diverged)
        s+="↕"
        ;;
        behind)
        s+="↓"
        ;;
      esac
      if [ -n "$__CURRENT_GIT_BRANCH_IS_DIRTY" ]; then
        s+="⚡"
      fi
      s+="$PR_CYAN)"

    echo $s
    fi
  }

  #advanced git
  getBranch() {
    if [[ -n "$1" ]]; then
      branch=$1
    else
      st="$(git status 2>/dev/null)"
      arr=(${(f)st})
      __CURRENT_GIT_BRANCH="${arr[1][(w)4]}";
      branch=$__CURRENT_GIT_BRANCH
    fi
    echo $branch
  }

  remaster () {
    branch=`getBranch $1`
    git checkout master; pull; checkout $branch; rebase master;
  }

  mergepush () {
    branch=`getBranch $1`
    git checkout master; merge $branch; push; checkout $branch;
  }

  alias checkout='git checkout'
  alias co='git checkout'
  alias rebase='git rebase'
  alias commit='git commit'
  alias push='git push'
  alias pull='git pull'
  alias merge='git merge'
  alias status='git status'
  alias u='grunt'
  alias reseed='rake db:drop && rake db:create && rake db:migrate && rake db:seed && rails s'

  # git shortcuts
  alias git-wtf="git checkout master && git pull origin master && git checkout work && git rebase master && git checkout master && git merge work && git push origin master && git checkout work"
  alias glo='git log --pretty=format:"%h%x09%an%x09%s"'
  alias gpm='git push origin master'
  alias gp='git push'
  alias gac='g a && g commit -m '
  alias gas='g a && g commit -m "squash me" && git rebase -i HEAD~2'

# @end

# @group completion and correction

  #completion
  zmodload zsh/complist
  autoload -Uz compinit && compinit

  #correction
  setopt correct
  setopt correctall

  setopt extended_glob

# @end

# @group history

  # enable and configure the history
  setopt HIST_NO_STORE # don't save 'history' cmd in history
  setopt APPEND_HISTORY     # append the history file (!important for using multiple zsh sessions)
  setopt SHARE_HISTORY      # use commands history files used by different zsh sessions
  setopt HIST_IGNORE_DUPS   # ignore adjacent duplicate commands

  HISTSIZE=1000
  SAVEHIST=1000
  HISTFILE=~/.history
  DIRSTACKSIZE=20

# @end

# @group aliases

  #commands
  alias video='sudo killall AppleCameraAssistant'
  alias flush='dscacheutil -flushcache'
  alias restart='sudo apachectl restart'
  alias h='history'
  alias c='clear'
  alias getpath='pwd|tr -d "\r\n"|pbcopy'
  alias ping='ping -oq'
  alias ipcp='ipconfig getifaddr en1 | pbcopy'
  alias be='bundle exec'

  # misc
  alias restartfonts="atsutil databases -removeUser && atsutil server -shutdown && atsutil server -ping"

# @end

# @group ip

  ip () {
    ifconfig en0 | grep netmask | awk '{print "lan: "$2}'
    ifconfig en1 | grep netmask | awk '{print "wifi: "$2}'
  }
# @end

# @group editor

  export EDITOR='mvim -w'

# @end

# @group vim

function s { killall SCREEN; local dir=`pwd`; cd ~; screen -S main -L; cd $dir; }
bindkey "^a" insert-last-word
bindkey -v
bindkey -M vicmd "d" vi-backward-char
bindkey -M vicmd "n" vi-forward-char
bindkey -M vicmd ",," vi-movement-mode
alias mvim='open -a MacVim'

# Autoload screen if we aren't in it.  (Thanks Fjord!)
# if [[ $STY = '' ]] then screen -xR; fi
# exec /usr/bin/clear

# exec /usr/bin/screen

# @end

# @group theme

# @group setprompt

  setprompt () {
    setopt prompt_subst
    autoload colors zsh/terminfo
    if [[ "$terminfo[colors]" -ge 8 ]]; then
      colors
    fi
    for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
      eval PR_$color='%{$fg[${(L)color}]%}'
      eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
      (( count = $count + 1 ))
    done
    PR_NO_COLOUR="%{$terminfo[sgr0]%}"
    typeset -A altchar
    set -A altchar ${(s..)terminfo[acsc]}
    PR_SET_CHARSET="%{$terminfo[enacs]%}"
    PR_SHIFT_IN="%{$terminfo[smacs]%}"
    PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
    PR_HBAR=${altchar[q]:--}
    PR_ULCORNER=${altchar[l]:--}
    PR_LLCORNER=${altchar[m]:--}
    PR_LRCORNER=${altchar[j]:--}
    PR_URCORNER=${altchar[k]:--}
    case $TERM in
      xterm*) PR_TITLEBAR=$'%{\e]0;%(!.-=*[ROOT]*=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\a%}';;
      screen) PR_TITLEBAR=$'%{\e_screen \005 (\005t) | %(!.-=[ROOT]=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\e\\%}';;
      *) PR_TITLEBAR='';;
    esac

    PROMPT='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}\
  $PR_CYAN$PR_SHIFT_IN$PR_ULCORNER$PR_CYAN$PR_HBAR$PR_SHIFT_OUT(\
  $PR_RED%m$PR_CYAN:$PR_GREEN%$PR_PWDLEN<...<%~%<<\
  $PR_CYAN)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_HBAR${(e)PR_FILLBAR}$PR_CYAN$PR_HBAR$PR_SHIFT_OUT
  $PR_CYAN$PR_SHIFT_IN$PR_LLCORNER$PR_CYAN$PR_HBAR$PR_SHIFT_OUT\
  ${(e)PR_APM}$PR_GREEN$(git_prompt)\
  $PR_CYAN$PR_SHIFT_IN $PR_SHIFT_OUT>\
  $PR_NO_COLOUR '

  #   %m

  #
  #   RPROMPT=' $PR_CYAN◊$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_HBAR$PR_SHIFT_OUT\
  # ($PR_GREEN%W$PR_CYAN)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_LRCORNER$PR_SHIFT_OUT$PR_NO_COLOUR'

    PS2='$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
  $PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
  $PR_MAGENTA%_$PR_CYAN)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
  $PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_NO_COLOUR '

  #   PROMPT='$PR_CYAN($PR_GREEN%$PR_PWDLEN<...<%~%<<$PR_CYAN)\
  # ${(e)PR_APM} $PR_CYAN$(git_prompt) $PR_NO_COLOUR'
  }

  # setprompt

# @end

# @group colors

  LS_COLORS='no=00:fi=00:di=09;33:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jpg=01;35:*.gif=01;35:*.bmp=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.png=01;35:*.mpg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:'

  export LS_COLORS

  if [ -e /usr/share/terminfo/x/xterm-256color ]; then
    export TERM='xterm-256color'
  else
      export TERM='xterm-color'
  fi

  export LSCOLORS=gxfxcxdxbxegedabagacad

# @end

# @group zstyle

  zstyle ':completion::complete:*' use-cache on
  zstyle ':completion::complete:*' cache-path ~/.zsh/cache/$HOST
  zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
  zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'
  zstyle ':completion:*' menu select=1 _complete _ignored _approximate
  zstyle -e ':completion:*:approximate:*' max-errors \
      'reply=( $(( ($#PREFIX+$#SUFFIX)/2 )) numeric )'
  zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
  zstyle ':completion:*::::' completer _expand _complete _ignored _approximate
  zstyle -e ':completion:*:approximate:*' max-errors \
      'reply=( $(( ($#PREFIX+$#SUFFIX)/2 )) numeric )'
  zstyle ':completion:*:expand:*' tag-order all-expansions
  zstyle ':completion:*' verbose yes
  zstyle ':completion:*:descriptions' format ' -%B%d%b- '
  zstyle ':completion:*:messages' format '%d'
  zstyle ':completion:*:warnings' format 'No matches for: %d'
  zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
  zstyle ':completion:*' group-name ''
  zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
  zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters
  zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
  zstyle ':completion:*:*:kill:*:processes' command 'ps --forest -A -o pid,user,cmd'
  zstyle ':completion:*:processes-names' command 'ps axho command'

# @end

# @end

# @group node

export NODE_PATH=/usr/local/lib/jsctags/:$NODE_PATH

# @end

# @group rbenv

source $HOME/.zshenv

# @end

# Submit PR for current branch against master
pr () {
  local repo=`git remote -v | grep -m 1 "(push)" | sed -e "s/.*github.com[:/]\(.*\)\.git.*/\1/"`
  local branch=`git name-rev --name-only HEAD`
  echo "... creating pull request for branch \"$branch\" in \"$repo\""
  open https://github.com/$repo/pull/new/$branch
}

# Speed up Ruby
export RUBY_GC_MALLOC_LIMIT=90000000
export RUBY_FREE_MIN=200000

cd Sites

ANDROID_HOME=/usr/local/opt/android-sdk

HOMEBREW_GITHUB_API_TOKEN=6ec139fe39e8341881e87357c3f495d67dc6c12a

gz () {
  gzip -c $1 | wc -c
}

boil () {
  git clone git@github.com:h5bp/html5-boilerplate.git $1
}

whatport () {
  lsof -i :$1
}

# ulimit -n 16384
# ulimit -u 2048
### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"
